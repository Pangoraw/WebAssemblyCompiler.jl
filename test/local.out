(ctx, parent) = (WebAssemblyCompiler.CompilerContext(Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenModule} @0x0000000004f2bd00, Dict{DataType, String}(), Dict{String, DataType}(), Dict{String, Any}(), Dict{Any, UInt64}(Float64 => 0x0000000000000005, Symbol => 0x0000000004987990, Int64 => 0x0000000000000003, UInt32 => 0x0000000000000002, Bool => 0x0000000000000002, Int32 => 0x0000000000000002, Externref => 0x000000000365dc90, UInt64 => 0x0000000000000003, Any => 0x000000000399cb50, Core.TypeofBottom => 0x0000000000000000, Float32 => 0x0000000000000004, String => 0x0000000004987990, Union{} => 0x0000000000000000, UInt8 => 0x0000000000000002), Dict{UInt64, Any}(), CodeInfo(
1 ─     return WebAssemblyCompiler.nothing
), Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression}[], UInt64[], 0, Dict{Int64, Int64}(), Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ─     return WebAssemblyCompiler.nothing
), Any[], Any[]))), nothing)
ctx.meta = Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ─     return WebAssemblyCompiler.nothing
), Any[], Any[]))
ci = CodeInfo(
1 ─ %1  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2))::Vector{Any}
│         Base.arrayset(true, %1, "", 1)::Vector{Any}
│         Base.arrayset(true, %1, :h1, 2)::Vector{Any}
│   %4  = invoke WebAssemblyCompiler.JS.object(%1::Vector{Any})::Externref
│   %5  = (Core.Intrinsics.llvmcall)("(x) => x.join(\"\")", WebAssemblyCompiler.JS.String, Tuple{Externref}, %4)::String
│   %6  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %7  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, %5, $(QuoteNode(NamedTuple())), %6)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %8  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %9  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "div", $(QuoteNode(NamedTuple())), %8)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %10 = invoke WebAssemblyCompiler.JS.:(var"#_#3")($(QuoteNode(Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}()))::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, %7::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "Hello there"::String, %9::Vararg{Any})::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %11 = invoke WebAssemblyCompiler.JS._string(%10::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})::String
│   %12 = (Core.Intrinsics.llvmcall)("(x) => document.getElementById(x)", WebAssemblyCompiler.JS.Externref, Tuple{String}, "myid")::Externref
│         (Core.Intrinsics.llvmcall)("(x, str) => x.innerHTML = str", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, String}, %12, %11)::Nothing
└──       return x
)
(ctx, parent) = (WebAssemblyCompiler.CompilerContext(Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenModule} @0x0000000004f2bd00, Dict{DataType, String}(Tuple{typeof(fcw2), Float64} => "fcw2"), Dict{String, DataType}("fcw2" => Tuple{typeof(fcw2), Float64}), Dict{String, Any}(), Dict{Any, UInt64}(Float64 => 0x0000000000000005, Symbol => 0x0000000004987990, Int64 => 0x0000000000000003, UInt32 => 0x0000000000000002, Bool => 0x0000000000000002, Int32 => 0x0000000000000002, Externref => 0x000000000365dc90, UInt64 => 0x0000000000000003, Any => 0x000000000399cb50, Core.TypeofBottom => 0x0000000000000000, Float32 => 0x0000000000000004, String => 0x0000000004987990, Union{} => 0x0000000000000000, UInt8 => 0x0000000000000002), Dict{UInt64, Any}(), CodeInfo(
1 ─ %1  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2))::Vector{Any}
│         Base.arrayset(true, %1, "", 1)::Vector{Any}
│         Base.arrayset(true, %1, :h1, 2)::Vector{Any}
│   %4  = invoke WebAssemblyCompiler.JS.object(%1::Vector{Any})::Externref
│   %5  = (Core.Intrinsics.llvmcall)("(x) => x.join(\"\")", WebAssemblyCompiler.JS.String, Tuple{Externref}, %4)::String
│   %6  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %7  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, %5, $(QuoteNode(NamedTuple())), %6)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %8  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %9  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "div", $(QuoteNode(NamedTuple())), %8)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %10 = invoke WebAssemblyCompiler.JS.:(var"#_#3")($(QuoteNode(Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}()))::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, %7::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "Hello there"::String, %9::Vararg{Any})::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %11 = invoke WebAssemblyCompiler.JS._string(%10::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})::String
│   %12 = (Core.Intrinsics.llvmcall)("(x) => document.getElementById(x)", WebAssemblyCompiler.JS.Externref, Tuple{String}, "myid")::Externref
│         (Core.Intrinsics.llvmcall)("(x, str) => x.innerHTML = str", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, String}, %12, %11)::Nothing
└──       return x
), Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression}[], UInt64[], 0, Dict{Int64, Int64}(), Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ─ %1  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2))::Vector{Any}
│         Base.arrayset(true, %1, "", 1)::Vector{Any}
│         Base.arrayset(true, %1, :h1, 2)::Vector{Any}
│   %4  = invoke WebAssemblyCompiler.JS.object(%1::Vector{Any})::Externref
│   %5  = (Core.Intrinsics.llvmcall)("(x) => x.join(\"\")", WebAssemblyCompiler.JS.String, Tuple{Externref}, %4)::String
│   %6  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %7  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, %5, $(QuoteNode(NamedTuple())), %6)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %8  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %9  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "div", $(QuoteNode(NamedTuple())), %8)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %10 = invoke WebAssemblyCompiler.JS.:(var"#_#3")($(QuoteNode(Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}()))::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, %7::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "Hello there"::String, %9::Vararg{Any})::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %11 = invoke WebAssemblyCompiler.JS._string(%10::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})::String
│   %12 = (Core.Intrinsics.llvmcall)("(x) => document.getElementById(x)", WebAssemblyCompiler.JS.Externref, Tuple{String}, "myid")::Externref
│         (Core.Intrinsics.llvmcall)("(x, str) => x.innerHTML = str", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, String}, %12, %11)::Nothing
└──       return x
), Any[], Any[]))), WebAssemblyCompiler.CompilerContext(Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenModule} @0x0000000004f2bd00, Dict{DataType, String}(Tuple{typeof(fcw2), Float64} => "fcw2"), Dict{String, DataType}("fcw2" => Tuple{typeof(fcw2), Float64}), Dict{String, Any}(), Dict{Any, UInt64}(Float64 => 0x0000000000000005, Symbol => 0x0000000004987990, Int64 => 0x0000000000000003, UInt32 => 0x0000000000000002, Bool => 0x0000000000000002, Int32 => 0x0000000000000002, Externref => 0x000000000365dc90, UInt64 => 0x0000000000000003, Any => 0x000000000399cb50, Core.TypeofBottom => 0x0000000000000000, Float32 => 0x0000000000000004, String => 0x0000000004987990, Union{} => 0x0000000000000000, UInt8 => 0x0000000000000002), Dict{UInt64, Any}(), CodeInfo(
1 ─     return WebAssemblyCompiler.nothing
), Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression}[], UInt64[], 0, Dict{Int64, Int64}(), Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ─     return WebAssemblyCompiler.nothing
), Any[], Any[]))))
ctx.meta = Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ─ %1  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2))::Vector{Any}
│         Base.arrayset(true, %1, "", 1)::Vector{Any}
│         Base.arrayset(true, %1, :h1, 2)::Vector{Any}
│   %4  = invoke WebAssemblyCompiler.JS.object(%1::Vector{Any})::Externref
│   %5  = (Core.Intrinsics.llvmcall)("(x) => x.join(\"\")", WebAssemblyCompiler.JS.String, Tuple{Externref}, %4)::String
│   %6  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %7  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, %5, $(QuoteNode(NamedTuple())), %6)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %8  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %9  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "div", $(QuoteNode(NamedTuple())), %8)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %10 = invoke WebAssemblyCompiler.JS.:(var"#_#3")($(QuoteNode(Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}()))::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, %7::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "Hello there"::String, %9::Vararg{Any})::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %11 = invoke WebAssemblyCompiler.JS._string(%10::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})::String
│   %12 = (Core.Intrinsics.llvmcall)("(x) => document.getElementById(x)", WebAssemblyCompiler.JS.Externref, Tuple{String}, "myid")::Externref
│         (Core.Intrinsics.llvmcall)("(x, str) => x.innerHTML = str", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, String}, %12, %11)::Nothing
└──       return x
), Any[], Any[]))
idx = 1
ssatype(ctx, idx) = Vector{Any}
node = :($(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2)))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ─ %1  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2))::Vector{Any}
│         Base.arrayset(true, %1, "", 1)::Vector{Any}
│         Base.arrayset(true, %1, :h1, 2)::Vector{Any}
│   %4  = invoke WebAssemblyCompiler.JS.object(%1::Vector{Any})::Externref
│   %5  = (Core.Intrinsics.llvmcall)("(x) => x.join(\"\")", WebAssemblyCompiler.JS.String, Tuple{Externref}, %4)::String
│   %6  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %7  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, %5, $(QuoteNode(NamedTuple())), %6)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %8  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %9  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "div", $(QuoteNode(NamedTuple())), %8)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %10 = invoke WebAssemblyCompiler.JS.:(var"#_#3")($(QuoteNode(Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}()))::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, %7::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "Hello there"::String, %9::Vararg{Any})::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %11 = invoke WebAssemblyCompiler.JS._string(%10::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})::String
│   %12 = (Core.Intrinsics.llvmcall)("(x) => document.getElementById(x)", WebAssemblyCompiler.JS.Externref, Tuple{String}, "myid")::Externref
│         (Core.Intrinsics.llvmcall)("(x, str) => x.innerHTML = str", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, String}, %12, %11)::Nothing
└──       return x
), Any[], Any[]))type = Base.RefValue{Int64}
type = WebAssemblyCompiler.FakeArrayWrapper{Any}
idx = 2
ssatype(ctx, idx) = Vector{Any}
node = :(Base.arrayset(true, %1, "", 1))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ─ %1  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2))::Vector{Any}
│         Base.arrayset(true, %1, "", 1)::Vector{Any}
│         Base.arrayset(true, %1, :h1, 2)::Vector{Any}
│   %4  = invoke WebAssemblyCompiler.JS.object(%1::Vector{Any})::Externref
│   %5  = (Core.Intrinsics.llvmcall)("(x) => x.join(\"\")", WebAssemblyCompiler.JS.String, Tuple{Externref}, %4)::String
│   %6  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %7  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, %5, $(QuoteNode(NamedTuple())), %6)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %8  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %9  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "div", $(QuoteNode(NamedTuple())), %8)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %10 = invoke WebAssemblyCompiler.JS.:(var"#_#3")($(QuoteNode(Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}()))::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, %7::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "Hello there"::String, %9::Vararg{Any})::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %11 = invoke WebAssemblyCompiler.JS._string(%10::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})::String
│   %12 = (Core.Intrinsics.llvmcall)("(x) => document.getElementById(x)", WebAssemblyCompiler.JS.Externref, Tuple{String}, "myid")::Externref
│         (Core.Intrinsics.llvmcall)("(x, str) => x.innerHTML = str", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, String}, %12, %11)::Nothing
└──       return x
), Any[:idx => 1, :ssavalue => Vector{Any}, :node => :($(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2))), :wasm => ""], Any[]))typeof(gval) = String
type = WebAssemblyCompiler.Box{String}
idx = 3
ssatype(ctx, idx) = Vector{Any}
node = :(Base.arrayset(true, %1, :h1, 2))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ─ %1  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2))::Vector{Any}
│         Base.arrayset(true, %1, "", 1)::Vector{Any}
│         Base.arrayset(true, %1, :h1, 2)::Vector{Any}
│   %4  = invoke WebAssemblyCompiler.JS.object(%1::Vector{Any})::Externref
│   %5  = (Core.Intrinsics.llvmcall)("(x) => x.join(\"\")", WebAssemblyCompiler.JS.String, Tuple{Externref}, %4)::String
│   %6  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %7  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, %5, $(QuoteNode(NamedTuple())), %6)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %8  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %9  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "div", $(QuoteNode(NamedTuple())), %8)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %10 = invoke WebAssemblyCompiler.JS.:(var"#_#3")($(QuoteNode(Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}()))::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, %7::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "Hello there"::String, %9::Vararg{Any})::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %11 = invoke WebAssemblyCompiler.JS._string(%10::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})::String
│   %12 = (Core.Intrinsics.llvmcall)("(x) => document.getElementById(x)", WebAssemblyCompiler.JS.Externref, Tuple{String}, "myid")::Externref
│         (Core.Intrinsics.llvmcall)("(x, str) => x.innerHTML = str", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, String}, %12, %11)::Nothing
└──       return x
), Any[:idx => 1, :ssavalue => Vector{Any}, :node => :($(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2))), :wasm => "", :idx => 2, :ssavalue => Vector{Any}, :node => :(Base.arrayset(true, %1, "", 1)), :wasm => ""], Any[]))typeof(gval) = Symbol
type = WebAssemblyCompiler.Box{Symbol}
idx = 4
ssatype(ctx, idx) = Externref
node = :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%1))))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ─ %1  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2))::Vector{Any}
│         Base.arrayset(true, %1, "", 1)::Vector{Any}
│         Base.arrayset(true, %1, :h1, 2)::Vector{Any}
│   %4  = invoke WebAssemblyCompiler.JS.object(%1::Vector{Any})::Externref
│   %5  = (Core.Intrinsics.llvmcall)("(x) => x.join(\"\")", WebAssemblyCompiler.JS.String, Tuple{Externref}, %4)::String
│   %6  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %7  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, %5, $(QuoteNode(NamedTuple())), %6)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %8  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %9  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "div", $(QuoteNode(NamedTuple())), %8)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %10 = invoke WebAssemblyCompiler.JS.:(var"#_#3")($(QuoteNode(Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}()))::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, %7::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "Hello there"::String, %9::Vararg{Any})::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %11 = invoke WebAssemblyCompiler.JS._string(%10::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})::String
│   %12 = (Core.Intrinsics.llvmcall)("(x) => document.getElementById(x)", WebAssemblyCompiler.JS.Externref, Tuple{String}, "myid")::Externref
│         (Core.Intrinsics.llvmcall)("(x, str) => x.innerHTML = str", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, String}, %12, %11)::Nothing
└──       return x
), Any[:idx => 1, :ssavalue => Vector{Any}, :node => :($(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2))), :wasm => "", :idx => 2, :ssavalue => Vector{Any}, :node => :(Base.arrayset(true, %1, "", 1)), :wasm => "", :idx => 3, :ssavalue => Vector{Any}, :node => :(Base.arrayset(true, %1, :h1, 2)), :wasm => ""], Any[]))newsig = Tuple{typeof(WebAssemblyCompiler.JS.object), Vector{Any}}
newci = CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
)
(ctx, parent) = (WebAssemblyCompiler.CompilerContext(Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenModule} @0x0000000004f2bd00, Dict{DataType, String}(Tuple{typeof(fcw2), Float64} => "fcw2", Tuple{typeof(WebAssemblyCompiler.JS.object), Vector{Any}} => "julia_objectVector_Any_"), Dict{String, DataType}("julia_objectVector_Any_" => Tuple{typeof(WebAssemblyCompiler.JS.object), Vector{Any}}, "fcw2" => Tuple{typeof(fcw2), Float64}), Dict{String, Any}(), Dict{Any, UInt64}(Float64 => 0x0000000000000005, Symbol => 0x0000000004987990, Int64 => 0x0000000000000003, Base.RefValue{Int64} => 0x0000000004f5e150, UInt32 => 0x0000000000000002, Bool => 0x0000000000000002, Int32 => 0x0000000000000002, Externref => 0x000000000365dc90, UInt64 => 0x0000000000000003, WebAssemblyCompiler.Buffer{Any} => 0x00000000033967f0, WebAssemblyCompiler.Box{String} => 0x0000000003201b20, Any => 0x000000000399cb50, Core.TypeofBottom => 0x0000000000000000, WebAssemblyCompiler.Box{Symbol} => 0x0000000003201b20, WebAssemblyCompiler.FakeArrayWrapper{Any} => 0x0000000004717170, Vector{Any} => 0x0000000004717170, Float32 => 0x0000000000000004, String => 0x0000000004987990, Union{} => 0x0000000000000000, UInt8 => 0x0000000000000002), Dict{UInt64, Any}(0xf1921f19227030ac => Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression} @0x00000000051b1f00, 0x81d5224790f6ea44 => Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression} @0x00000000051b2078), CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression}[], UInt64[], 0, Dict{Int64, Int64}(), Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[], Any[]))), WebAssemblyCompiler.CompilerContext(Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenModule} @0x0000000004f2bd00, Dict{DataType, String}(Tuple{typeof(fcw2), Float64} => "fcw2", Tuple{typeof(WebAssemblyCompiler.JS.object), Vector{Any}} => "julia_objectVector_Any_"), Dict{String, DataType}("julia_objectVector_Any_" => Tuple{typeof(WebAssemblyCompiler.JS.object), Vector{Any}}, "fcw2" => Tuple{typeof(fcw2), Float64}), Dict{String, Any}(), Dict{Any, UInt64}(Float64 => 0x0000000000000005, Symbol => 0x0000000004987990, Int64 => 0x0000000000000003, Base.RefValue{Int64} => 0x0000000004f5e150, UInt32 => 0x0000000000000002, Bool => 0x0000000000000002, Int32 => 0x0000000000000002, Externref => 0x000000000365dc90, UInt64 => 0x0000000000000003, WebAssemblyCompiler.Buffer{Any} => 0x00000000033967f0, WebAssemblyCompiler.Box{String} => 0x0000000003201b20, Any => 0x000000000399cb50, Core.TypeofBottom => 0x0000000000000000, WebAssemblyCompiler.Box{Symbol} => 0x0000000003201b20, WebAssemblyCompiler.FakeArrayWrapper{Any} => 0x0000000004717170, Vector{Any} => 0x0000000004717170, Float32 => 0x0000000000000004, String => 0x0000000004987990, Union{} => 0x0000000000000000, UInt8 => 0x0000000000000002), Dict{UInt64, Any}(0xf1921f19227030ac => Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression} @0x00000000051b1f00, 0x81d5224790f6ea44 => Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression} @0x00000000051b2078), CodeInfo(
1 ─ %1  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2))::Vector{Any}
│         Base.arrayset(true, %1, "", 1)::Vector{Any}
│         Base.arrayset(true, %1, :h1, 2)::Vector{Any}
│   %4  = invoke WebAssemblyCompiler.JS.object(%1::Vector{Any})::Externref
│   %5  = (Core.Intrinsics.llvmcall)("(x) => x.join(\"\")", WebAssemblyCompiler.JS.String, Tuple{Externref}, %4)::String
│   %6  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %7  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, %5, $(QuoteNode(NamedTuple())), %6)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %8  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %9  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "div", $(QuoteNode(NamedTuple())), %8)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %10 = invoke WebAssemblyCompiler.JS.:(var"#_#3")($(QuoteNode(Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}()))::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, %7::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "Hello there"::String, %9::Vararg{Any})::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %11 = invoke WebAssemblyCompiler.JS._string(%10::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})::String
│   %12 = (Core.Intrinsics.llvmcall)("(x) => document.getElementById(x)", WebAssemblyCompiler.JS.Externref, Tuple{String}, "myid")::Externref
│         (Core.Intrinsics.llvmcall)("(x, str) => x.innerHTML = str", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, String}, %12, %11)::Nothing
└──       return x
), Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression}[Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression} @0x00000000051b1de8, Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression} @0x00000000051b1f58, Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression} @0x00000000051b20d0], UInt64[0x0000000004717170], 2, Dict(1 => 1), Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ─ %1  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2))::Vector{Any}
│         Base.arrayset(true, %1, "", 1)::Vector{Any}
│         Base.arrayset(true, %1, :h1, 2)::Vector{Any}
│   %4  = invoke WebAssemblyCompiler.JS.object(%1::Vector{Any})::Externref
│   %5  = (Core.Intrinsics.llvmcall)("(x) => x.join(\"\")", WebAssemblyCompiler.JS.String, Tuple{Externref}, %4)::String
│   %6  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %7  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, %5, $(QuoteNode(NamedTuple())), %6)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %8  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %9  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "div", $(QuoteNode(NamedTuple())), %8)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %10 = invoke WebAssemblyCompiler.JS.:(var"#_#3")($(QuoteNode(Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}()))::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, %7::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "Hello there"::String, %9::Vararg{Any})::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %11 = invoke WebAssemblyCompiler.JS._string(%10::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})::String
│   %12 = (Core.Intrinsics.llvmcall)("(x) => document.getElementById(x)", WebAssemblyCompiler.JS.Externref, Tuple{String}, "myid")::Externref
│         (Core.Intrinsics.llvmcall)("(x, str) => x.innerHTML = str", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, String}, %12, %11)::Nothing
└──       return x
), Any[:idx => 1, :ssavalue => Vector{Any}, :node => :($(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2))), :wasm => "", :idx => 2, :ssavalue => Vector{Any}, :node => :(Base.arrayset(true, %1, "", 1)), :wasm => "", :idx => 3, :ssavalue => Vector{Any}, :node => :(Base.arrayset(true, %1, :h1, 2)), :wasm => "", :idx => 4, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%1))))], Any[]))))
ctx.meta = Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[], Any[]))
idx = 1
ssatype(ctx, idx) = Int64
node = :(Base.arraylen(_2))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[], Any[]))idx = 2
ssatype(ctx, idx) = Int32
node = :(Core.trunc_int(Int32, %1))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => ""], Any[]))idx = 3
ssatype(ctx, idx) = Int64
node = :(Core.sext_int(Int64, %2))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => ""], Any[]))idx = 4
ssatype(ctx, idx) = Bool
node = :(Core.eq_int(%1, %3))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => ""], Any[]))idx = 5
ssatype(ctx, idx) = Any
node = :(goto %7 if not %4)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => ""], Any[]))idx = 6
ssatype(ctx, idx) = Any
node = :(goto %8)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4)], Any[]))idx = 7
ssatype(ctx, idx) = Nothing
node = :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion"))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8)], Any[]))type = Nothing
typeof(gval) = String
idx = 8
ssatype(ctx, idx) = Any
node = :(goto %9)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion"))], Any[]))idx = 9
ssatype(ctx, idx) = Any
node = :(goto %10)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9)], Any[]))idx = 10
ssatype(ctx, idx) = Any
node = :(goto %11)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10)], Any[]))idx = 11
ssatype(ctx, idx) = Externref
node = :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11)], Any[]))idx = 12
ssatype(ctx, idx) = UInt64
node = :(Base.bitcast(UInt64, 1))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => ""], Any[]))idx = 13
ssatype(ctx, idx) = UInt64
node = :(Base.sub_int(%12, 0x0000000000000001))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => ""], Any[]))idx = 14
ssatype(ctx, idx) = Int64
node = :(Base.arraylen(_2))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => ""], Any[]))idx = 15
ssatype(ctx, idx) = Bool
node = :(Base.sle_int(0, %14))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => ""], Any[]))idx = 16
ssatype(ctx, idx) = UInt64
node = :(Base.bitcast(UInt64, %14))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => ""], Any[]))idx = 17
ssatype(ctx, idx) = Bool
node = :(Base.ult_int(%13, %16))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => ""], Any[]))idx = 18
ssatype(ctx, idx) = Bool
node = :(Base.and_int(%15, %17))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => ""], Any[]))idx = 19
ssatype(ctx, idx) = Any
node = :(goto %23 if not %18)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => ""], Any[]))idx = 20
ssatype(ctx, idx) = Any
node = :(Base.arrayref(false, _2, 1))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18)], Any[]))idx = 21
ssatype(ctx, idx) = Int64
node = :(Base.add_int(1, 1))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => ""], Any[]))idx = 22
ssatype(ctx, idx) = Any
node = :(goto %24)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => ""], Any[]))idx = 23
ssatype(ctx, idx) = Any
node = :(goto %24)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24)], Any[]))idx = 24
ssatype(ctx, idx) = Bool
node = :(φ (%22 => false, %23 => true))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24)], Any[]))idx = 25
ssatype(ctx, idx) = Any
node = :(φ (%22 => %20))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true))], Any[]))idx = 26
ssatype(ctx, idx) = Int64
node = :(φ (%22 => %21))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20))], Any[]))idx = 27
ssatype(ctx, idx) = Bool
node = :(φ (%23 => true))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21))], Any[]))idx = 28
ssatype(ctx, idx) = Any
node = :(goto %29)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true))], Any[]))idx = 29
ssatype(ctx, idx) = Any
node = :(goto %31 if not %24)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29)], Any[]))idx = 30
ssatype(ctx, idx) = Any
node = :(goto %32)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24)], Any[]))idx = 31
ssatype(ctx, idx) = Any
node = :(goto %32)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32)], Any[]))idx = 32
ssatype(ctx, idx) = Bool
node = :(φ (%30 => %27, %31 => false))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32)], Any[]))idx = 33
ssatype(ctx, idx) = Int64
node = :(φ (%31 => 1))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false))], Any[]))idx = 34
ssatype(ctx, idx) = Any
node = :(φ (%31 => %25))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1))], Any[]))idx = 35
ssatype(ctx, idx) = Int64
node = :(φ (%31 => 2))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25))], Any[]))idx = 36
ssatype(ctx, idx) = Int64
node = :(φ (%31 => %26))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2))], Any[]))idx = 37
ssatype(ctx, idx) = Any
node = :(goto %38)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26))], Any[]))idx = 38
ssatype(ctx, idx) = Bool
node = :(Base.not_int(%32))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38)], Any[]))idx = 39
ssatype(ctx, idx) = Any
node = :(goto %183 if not %38)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => ""], Any[]))idx = 40
ssatype(ctx, idx) = Int64
node = :(φ (%39 => %33, %182 => %178))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38)], Any[]))idx = 41
ssatype(ctx, idx) = Any
node = :(φ (%39 => %34, %182 => %177))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178))], Any[]))idx = 42
ssatype(ctx, idx) = Int64
node = :(φ (%39 => %35, %182 => %176))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177))], Any[]))idx = 43
ssatype(ctx, idx) = Int64
node = :(φ (%39 => %36, %182 => %175))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176))], Any[]))idx = 44
ssatype(ctx, idx) = Bool
node = :(%41 isa WebAssemblyCompiler.Box{Float64})
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175))], Any[]))type = WebAssemblyCompiler.Box{Float64}
idx = 45
ssatype(ctx, idx) = Any
node = :(goto %61 if not %44)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => ""], Any[]))idx = 46
ssatype(ctx, idx) = WebAssemblyCompiler.Box{Float64}
node = Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64})
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44)], Any[]))idx = 47
ssatype(ctx, idx) = Float64
node = :(Base.getfield(%46, :x))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => ""], Any[]))T = WebAssemblyCompiler.Box{Float64}
field = :(:x)
idx = 48
ssatype(ctx, idx) = Int64
node = :(Base.sub_int(%40, 1))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => ""], Any[]))idx = 49
ssatype(ctx, idx) = Int32
node = :(Core.trunc_int(Int32, %48))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => (local.set $1
 (struct.new $struct.0
  (array.new $array.0
   (struct.new $struct.1
    (i64.const 0)
   )
   (i32.wrap_i64
    (i64.const 2)
   )
  )
  (i32.wrap_i64
   (i64.const 2)
  )
 )
)
(local.set $1
 (struct.new $struct.0
  (array.new $array.0
   (struct.new $struct.1
    (i64.const 0)
   )
   (i32.wrap_i64
    (i64.const 2)
   )
  )
  (i32.wrap_i64
   (i64.const 2)
  )
 )
)
(array.set $array.0
 (struct.get $struct.0 0
  (local.get $1)
 )
 (i32.add
  (i32.wrap_i64
   (i64.const 1)
  )
  (i32.const -1)
 )
 (struct.new $struct.1
  (global.get $g17407009702552809644)
 )
)
(array.set $array.0
 (struct.get $struct.0 0
  (local.get $1)
 )
 (i32.add
  (i32.wrap_i64
   (i64.const 1)
  )
  (i32.const -1)
 )
 (struct.new $struct.1
  (global.get $g17407009702552809644)
 )
)
(array.set $array.0
 (struct.get $struct.0 0
  (local.get $1)
 )
 (i32.add
  (i32.wrap_i64
   (i64.const 2)
  )
  (i32.const -1)
 )
 (struct.new $struct.1
  (global.get $g9355421491702196804)
 )
)
(array.set $array.0
 (struct.get $struct.0 0
  (local.get $1)
 )
 (i32.add
  (i32.wrap_i64
   (i64.const 2)
  )
  (i32.const -1)
 )
 (struct.new $struct.1
  (global.get $g9355421491702196804)
 )
)
(local.set $23
 (i64.extend_i32_u
  (struct.get $struct.0 1
   (local.get $0)
  )
 )
)
(local.set $23
 (i64.extend_i32_u
  (struct.get $struct.0 1
   (local.get $0)
  )
 )
)
(local.set $24
 (i32.wrap_i64
  (local.get $23)
 )
)
(local.set $24
 (i32.wrap_i64
  (local.get $23)
 )
)
(local.set $25
 (i64.extend_i32_s
  (local.get $24)
 )
)
(local.set $25
 (i64.extend_i32_s
  (local.get $24)
 )
)
(local.set $26
 (i64.eq
  (local.get $23)
  (local.get $25)
 )
)
(local.set $26
 (i64.eq
  (local.get $23)
  (local.get $25)
 )
)
(local.set $27
 (call $n____Array_n_ExternrefInt32
  (local.get $24)
 )
)
(local.set $27
 (call $n____Array_n_ExternrefInt32
  (local.get $24)
 )
)
(local.set $28
 (i64.const 1)
)
(local.set $28
 (i64.const 1)
)
(local.set $29
 (i64.sub
  (local.get $28)
  (i64.const 1)
 )
)
(local.set $29
 (i64.sub
  (local.get $28)
  (i64.const 1)
 )
)
(local.set $30
 (i64.extend_i32_u
  (struct.get $struct.0 1
   (local.get $0)
  )
 )
)
(local.set $30
 (i64.extend_i32_u
  (struct.get $struct.0 1
   (local.get $0)
  )
 )
)
(local.set $31
 (i64.le_s
  (i64.const 0)
  (local.get $30)
 )
)
(local.set $31
 (i64.le_s
  (i64.const 0)
  (local.get $30)
 )
)
(local.set $32
 (local.get $30)
)
(local.set $32
 (local.get $30)
)
(local.set $33
 (i64.lt_u
  (local.get $29)
  (local.get $32)
 )
)
(local.set $33
 (i64.lt_u
  (local.get $29)
  (local.get $32)
 )
)
(local.set $34
 (i32.and
  (local.get $31)
  (local.get $33)
 )
)
(local.set $34
 (i32.and
  (local.get $31)
  (local.get $33)
 )
)
(local.set $35
 (array.get $array.0
  (struct.get $struct.0 0
   (local.get $0)
  )
  (i32.add
   (i32.wrap_i64
    (i64.const 1)
   )
   (i32.const -1)
  )
 )
)
(local.set $35
 (array.get $array.0
  (struct.get $struct.0 0
   (local.get $0)
  )
  (i32.add
   (i32.wrap_i64
    (i64.const 1)
   )
   (i32.const -1)
  )
 )
)
(local.set $36
 (i64.add
  (i64.const 1)
  (i64.const 1)
 )
)
(local.set $36
 (i64.add
  (i64.const 1)
  (i64.const 1)
 )
)
(local.set $37
 (i32.and
  (i32.xor
   (local.get $5)
   (i32.const -1)
  )
  (i32.const 1)
 )
)
(local.set $37
 (i32.and
  (i32.xor
   (local.get $5)
   (i32.const -1)
  )
  (i32.const 1)
 )
)
(local.set $38
 (ref.test (ref null $struct.0)
  (local.get $11)
 )
)
(local.set $38
 (ref.test (ref null $struct.0)
  (local.get $11)
 )
)
(local.set $39
 (ref.cast (ref null $struct.0)
  (local.get $11)
 )
)
(local.set $39
 (ref.cast (ref null $struct.0)
  (local.get $11)
 )
)
(local.set $40
 (struct.get $struct.0 0
  (local.get $39)
 )
)
(local.set $40
 (struct.get $struct.0 0
  (local.get $39)
 )
)
(local.set $41
 (i64.sub
  (local.get $10)
  (i64.const 1)
 )
)
(local.set $41
 (i64.sub
  (local.get $10)
  (i64.const 1)
 )
)
(local.set $42
 (i32.wrap_i64
  (local.get $41)
 )
)
(local.set $42
 (i32.wrap_i64
  (local.get $41)
 )
)
(local.set $43
 (i64.extend_i32_s
  (local.get $42)
 )
)
(local.set $43
 (i64.extend_i32_s
  (local.get $42)
 )
)
(local.set $44
 (i64.e46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => ""], Any[]))idx = 50
ssatype(ctx, idx) = Int64
node = :(Core.sext_int(Int64, %49))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => ""], Any[]))idx = 51
ssatype(ctx, idx) = Bool
node = :(Core.eq_int(%48, %50))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => ""], Any[]))idx = 52
ssatype(ctx, idx) = Any
node = :(goto %54 if not %51)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => ""], Any[]))idx = 53
ssatype(ctx, idx) = Any
node = :(goto %55)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51)], Any[]))idx = 54
ssatype(ctx, idx) = Nothing
node = :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion"))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55)], Any[]))idx = 55
ssatype(ctx, idx) = Any
node = :(goto %56)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion"))], Any[]))idx = 56
ssatype(ctx, idx) = Any
node = :(goto %57)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56)], Any[]))idx = 57
ssatype(ctx, idx) = Any
node = :(goto %58)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57)], Any[]))idx = 58
ssatype(ctx, idx) = Nothing
node = :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58)], Any[]))idx = 59
ssatype(ctx, idx) = Any
node = :(goto %60)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47))], Any[]))idx = 60
ssatype(ctx, idx) = Any
node = :(goto %155)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60)], Any[]))idx = 61
ssatype(ctx, idx) = Bool
node = :(%41 isa WebAssemblyCompiler.Box{Int32})
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155)], Any[]))type = WebAssemblyCompiler.Box{Int32}
idx = 62
ssatype(ctx, idx) = Any
node = :(goto %78 if not %61)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => ""], Any[]))idx = 63
ssatype(ctx, idx) = WebAssemblyCompiler.Box{Int32}
node = Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32})
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61)], Any[]))idx = 64
ssatype(ctx, idx) = Int32
node = :(Base.getfield(%63, :x))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => ""], Any[]))T = WebAssemblyCompiler.Box{Int32}
field = :(:x)
idx = 65
ssatype(ctx, idx) = Int64
node = :(Base.sub_int(%40, 1))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => ""], Any[]))idx = 66
ssatype(ctx, idx) = Int32
node = :(Core.trunc_int(Int32, %65))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => ""], Any[]))idx = 67
ssatype(ctx, idx) = Int64
node = :(Core.sext_int(Int64, %66))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => ""], Any[]))idx = 68
ssatype(ctx, idx) = Bool
node = :(Core.eq_int(%65, %67))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => ""], Any[]))idx = 69
ssatype(ctx, idx) = Any
node = :(goto %71 if not %68)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => ""], Any[]))idx = 70
ssatype(ctx, idx) = Any
node = :(goto %72)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68)], Any[]))idx = 71
ssatype(ctx, idx) = Nothing
node = :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion"))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72)], Any[]))idx = 72
ssatype(ctx, idx) = Any
node = :(goto %73)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion"))], Any[]))idx = 73
ssatype(ctx, idx) = Any
node = :(goto %74)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73)], Any[]))idx = 74
ssatype(ctx, idx) = Any
node = :(goto %75)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74)], Any[]))idx = 75
ssatype(ctx, idx) = Nothing
node = :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75)], Any[]))idx = 76
ssatype(ctx, idx) = Any
node = :(goto %77)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64))], Any[]))idx = 77
ssatype(ctx, idx) = Any
node = :(goto %155)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77)], Any[]))idx = 78
ssatype(ctx, idx) = Bool
node = :(%41 isa WebAssemblyCompiler.Box{String})
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155)], Any[]))idx = 79
ssatype(ctx, idx) = Any
node = :(goto %95 if not %78)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => ""], Any[]))idx = 80
ssatype(ctx, idx) = WebAssemblyCompiler.Box{String}
node = Core.PiNode(:(%41), WebAssemblyCompiler.Box{String})
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78)], Any[]))idx = 81
ssatype(ctx, idx) = String
node = :(Base.getfield(%80, :x))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => ""], Any[]))T = WebAssemblyCompiler.Box{String}
field = :(:x)
idx = 82
ssatype(ctx, idx) = Int64
node = :(Base.sub_int(%40, 1))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => ""], Any[]))idx = 83
ssatype(ctx, idx) = Int32
node = :(Core.trunc_int(Int32, %82))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => ""], Any[]))idx = 84
ssatype(ctx, idx) = Int64
node = :(Core.sext_int(Int64, %83))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => ""], Any[]))idx = 85
ssatype(ctx, idx) = Bool
node = :(Core.eq_int(%82, %84))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => ""], Any[]))idx = 86
ssatype(ctx, idx) = Any
node = :(goto %88 if not %85)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => ""], Any[]))idx = 87
ssatype(ctx, idx) = Any
node = :(goto %89)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85)], Any[]))idx = 88
ssatype(ctx, idx) = Nothing
node = :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion"))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89)], Any[]))idx = 89
ssatype(ctx, idx) = Any
node = :(goto %90)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion"))], Any[]))idx = 90
ssatype(ctx, idx) = Any
node = :(goto %91)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90)], Any[]))idx = 91
ssatype(ctx, idx) = Any
node = :(goto %92)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91)], Any[]))idx = 92
ssatype(ctx, idx) = Nothing
node = :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92)], Any[]))idx = 93
ssatype(ctx, idx) = Any
node = :(goto %94)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81))], Any[]))idx = 94
ssatype(ctx, idx) = Any
node = :(goto %155)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94)], Any[]))idx = 95
ssatype(ctx, idx) = Bool
node = :(%41 isa WebAssemblyCompiler.Box{Int64})
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155)], Any[]))type = WebAssemblyCompiler.Box{Int64}
idx = 96
ssatype(ctx, idx) = Any
node = :(goto %121 if not %95)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => ""], Any[]))idx = 97
ssatype(ctx, idx) = WebAssemblyCompiler.Box{Int64}
node = Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64})
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95)], Any[]))idx = 98
ssatype(ctx, idx) = Int64
node = :(Base.getfield(%97, :x))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => ""], Any[]))T = WebAssemblyCompiler.Box{Int64}
field = :(:x)
idx = 99
ssatype(ctx, idx) = Int32
node = :(Core.trunc_int(Int32, %98))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => ""], Any[]))idx = 100
ssatype(ctx, idx) = Int64
node = :(Core.sext_int(Int64, %99))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => ""], Any[]))idx = 101
ssatype(ctx, idx) = Bool
node = :(Core.eq_int(%98, %100))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => ""], Any[]))idx = 102
ssatype(ctx, idx) = Any
node = :(goto %104 if not %101)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => ""], Any[]))idx = 103
ssatype(ctx, idx) = Any
node = :(goto %105)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101)], Any[]))idx = 104
ssatype(ctx, idx) = Nothing
node = :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion"))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105)], Any[]))idx = 105
ssatype(ctx, idx) = Any
node = :(goto %106)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion"))], Any[]))idx = 106
ssatype(ctx, idx) = Any
node = :(goto %107)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106)], Any[]))idx = 107
ssatype(ctx, idx) = Any
node = :(goto %108)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107)], Any[]))idx = 108
ssatype(ctx, idx) = Int64
node = :(Base.sub_int(%40, 1))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108)], Any[]))idx = 109
ssatype(ctx, idx) = Int32
node = :(Core.trunc_int(Int32, %108))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => ""], Any[]))idx = 110
ssatype(ctx, idx) = Int64
node = :(Core.sext_int(Int64, %109))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => ""], Any[]))idx = 111
ssatype(ctx, idx) = Bool
node = :(Core.eq_int(%108, %110))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => ""], Any[]))idx = 112
ssatype(ctx, idx) = Any
node = :(goto %114 if not %111)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => ""], Any[]))idx = 113
ssatype(ctx, idx) = Any
node = :(goto %115)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111)], Any[]))idx = 114
ssatype(ctx, idx) = Nothing
node = :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion"))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115)], Any[]))idx = 115
ssatype(ctx, idx) = Any
node = :(goto %116)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion"))], Any[]))idx = 116
ssatype(ctx, idx) = Any
node = :(goto %117)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116)], Any[]))idx = 117
ssatype(ctx, idx) = Any
node = :(goto %118)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117)], Any[]))idx = 118
ssatype(ctx, idx) = Nothing
node = :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118)], Any[]))idx = 119
ssatype(ctx, idx) = Any
node = :(goto %120)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99))], Any[]))idx = 120
ssatype(ctx, idx) = Any
node = :(goto %155)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120)], Any[]))idx = 121
ssatype(ctx, idx) = Bool
node = :(%41 isa WebAssemblyCompiler.Box{Bool})
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155)], Any[]))type = WebAssemblyCompiler.Box{Bool}
idx = 122
ssatype(ctx, idx) = Any
node = :(goto %138 if not %121)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => ""], Any[]))idx = 123
ssatype(ctx, idx) = WebAssemblyCompiler.Box{Bool}
node = Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool})
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121)], Any[]))idx = 124
ssatype(ctx, idx) = Bool
node = :(Base.getfield(%123, :x))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => ""], Any[]))T = WebAssemblyCompiler.Box{Bool}
field = :(:x)
idx = 125
ssatype(ctx, idx) = Int64
node = :(Base.sub_int(%40, 1))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => ""], Any[]))idx = 126
ssatype(ctx, idx) = Int32
node = :(Core.trunc_int(Int32, %125))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => ""], Any[]))idx = 127
ssatype(ctx, idx) = Int64
node = :(Core.sext_int(Int64, %126))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => ""], Any[]))idx = 128
ssatype(ctx, idx) = Bool
node = :(Core.eq_int(%125, %127))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => ""], Any[]))idx = 129
ssatype(ctx, idx) = Any
node = :(goto %131 if not %128)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => ""], Any[]))idx = 130
ssatype(ctx, idx) = Any
node = :(goto %132)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128)], Any[]))idx = 131
ssatype(ctx, idx) = Nothing
node = :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion"))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132)], Any[]))idx = 132
ssatype(ctx, idx) = Any
node = :(goto %133)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion"))], Any[]))idx = 133
ssatype(ctx, idx) = Any
node = :(goto %134)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133)], Any[]))idx = 134
ssatype(ctx, idx) = Any
node = :(goto %135)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134)], Any[]))idx = 135
ssatype(ctx, idx) = Nothing
node = :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135)], Any[]))idx = 136
ssatype(ctx, idx) = Any
node = :(goto %137)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124))], Any[]))idx = 137
ssatype(ctx, idx) = Any
node = :(goto %155)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137)], Any[]))idx = 138
ssatype(ctx, idx) = Bool
node = :(%41 isa Vector{Any})
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)q
  (local.get $41)
  (local.get $43)
 )
)
(local.set $44
 (i64.eq
  (local.get $41)
  (local.get $43)
 )
)
(local.set $45
 (ref.test (ref null $struct.0)
  (local.get $11)
 )
)
(local.set $45
 (ref.test (ref null $struct.0)
  (local.get $11)
 )
)
(local.set $46
 (ref.cast (ref null $struct.0)
  (local.get $11)
 )
)
(local.set $46
 (ref.cast (ref null $struct.0)
  (local.get $11)
 )
)
(local.set $47
 (struct.get $struct.0 0
  (local.get $46)
 )
)
(local.set $47
 (struct.get $struct.0 0
  (local.get $46)
 )
)
(local.set $48
 (i64.sub
  (local.get $10)
  (i64.const 1)
 )
)
(local.set $48
 (i64.sub
  (local.get $10)
  (i64.const 1)
 )
)
(local.set $49
 (i32.wrap_i64
  (local.get $48)
 )
)
(local.set $49
 (i32.wrap_i64
  (local.get $48)
 )
)
(local.set $50
 (i64.extend_i32_s
  (local.get $49)
 )
)
(local.set $50
 (i64.extend_i32_s
  (local.get $49)
 )
)
(local.set $51
 (i64.eq
  (local.get $48)
  (local.get $50)
 )
)
(local.set $51
 (i64.eq
  (local.get $48)
  (local.get $50)
 )
)
(local.set $52
 (ref.test (ref null $struct.0)
  (local.get $11)
 )
)
(local.set $52
 (ref.test (ref null $struct.0)
  (local.get $11)
 )
)
(local.set $53
 (ref.cast (ref null $struct.0)
  (local.get $11)
 )
)
(local.set $53
 (ref.cast (ref null $struct.0)
  (local.get $11)
 )
)
(local.set $54
 (struct.get $struct.0 0
  (local.get $53)
 )
)
(local.set $54
 (struct.get $struct.0 0
  (local.get $53)
 )
)
(local.set $55
 (i64.sub
  (local.get $10)
  (i64.const 1)
 )
)
(local.set $55
 (i64.sub
  (local.get $10)
  (i64.const 1)
 )
)
(local.set $56
 (i32.wrap_i64
  (local.get $55)
 )
)
(local.set $56
 (i32.wrap_i64
  (local.get $55)
 )
)
(local.set $57
 (i64.extend_i32_s
  (local.get $56)
 )
)
(local.set $57
 (i64.extend_i32_s
  (local.get $56)
 )
)
(local.set $58
 (i64.eq
  (local.get $55)
  (local.get $57)
 )
)
(local.set $58
 (i64.eq
  (local.get $55)
  (local.get $57)
 )
)
(local.set $59
 (ref.test (ref null $struct.0)
  (local.get $11)
 )
)
(local.set $59
 (ref.test (ref null $struct.0)
  (local.get $11)
 )
)
(local.set $60
 (ref.cast (ref null $struct.0)
  (local.get $11)
 )
)
(local.set $60
 (ref.cast (ref null $struct.0)
  (local.get $11)
 )
)
(local.set $61
 (struct.get $struct.0 0
  (local.get $60)
 )
)
(local.set $61
 (struct.get $struct.0 0
  (local.get $60)
 )
)
(local.set $62
 (i32.wrap_i64
  (local.get $61)
 )
)
(local.set $62
 (i32.wrap_i64
  (local.get $61)
 )
)
(local.set $63
 (i64.extend_i32_s
  (local.get $62)
 )
)
(local.set $63
 (i64.extend_i32_s
  (local.get $62)
 )
)
(local.set $64
 (i64.eq
  (local.get $61)
  (local.get $63)
 )
)
(local.set $64
 (i64.eq
  (local.get $61)
  (local.get $63)
 )
)
(local.set $65
 (i64.sub
  (local.get $10)
  (i64.const 1)
 )
)
(local.set $65
 (i64.sub
  (local.get $10)
  (i64.const 1)
 )
)
(local.set $66
 (i32.wrap_i64
  (local.get $65)
 )
)
(local.set $66
 (i32.wrap_i64
  (local.get $65)
 )
)
(local.set $67
 (i64.extend_i32_s
  (local.get $66)
 )
)
(local.set $67
 (i64.extend_i32_s
  (local.get $66)
 )
)
(local.set $68
 (i64.eq
  (local.get $65)
  (local.get $67)
 )
)
(local.set $68
 (i64.eq
  (local.get $65)
  (local.get $67)
 )
)
(local.set $69
 (ref.test (ref null $struct.0)
  (local.get $11)
 )
)
(local.set $69
 (ref.test (ref null $struct.0)
  (local.get $11)
 )
)
(local.set $70
 (ref.cast (ref null $struct.0)
  (local.get $11)
 )
)
(local.set $70
 (ref.cast (ref null $struct.0)
  (local.get $11)
 )
)
(local.set $71
 (struct.get $struct.0 0
  (local.get $70)
 )
)
(local.set $71
 (struct.get $struct.0 0
  (local.get $70)
 )
)
(local.set $72
 (i64.sub
  (local.get $10)
  (i64.const 1)
 )
)
(local.set $72
 (i64.sub
  (local.get $10)
  (i64.const 1)
 )
)
(local.set $73
 (i32.wrap_i64
  (local.get $72)
 )
)
(local.set $73
 (i32.wrap_i64
  (local.get $72)
 )
)
(local.set $74
 (i64.extend_i32_s
  (local.get $73)
 )
)
(local.set $74
 (i64.extend_i32_s
  (local.get $73)
 )
)
(local.set $75
 (i64.eq
  (local.get $72)
  (local.get $74)
 )
)
(local.set $75
 (i64.eq
  (local.get $72)
  (local.get $74)
 )
)
(local.set $76
 (ref.test (ref null $struct.0)
  (local.get $11)
 )
)
(local.set $76
 (ref.test (ref n::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155)], Any[]))idx = 139
ssatype(ctx, idx) = Any
node = :(goto %155 if not %138)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => ""], Any[]))idx = 140
ssatype(ctx, idx) = Vector{Any}
node = Core.PiNode(:(%41), Vector{Any})
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138)], Any[]))idx = 141
ssatype(ctx, idx) = Externref
node = :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140))))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => ""], Any[]))idx = 142
ssatype(ctx, idx) = Int64
node = :(Base.sub_int(%40, 1))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => ""], Any[]))idx = 143
ssatype(ctx, idx) = Int32
node = :(Core.trunc_int(Int32, %142))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => ""], Any[]))idx = 144
ssatype(ctx, idx) = Int64
node = :(Core.sext_int(Int64, %143))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => ""], Any[]))idx = 145
ssatype(ctx, idx) = Bool
node = :(Core.eq_int(%142, %144))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => ""], Any[]))idx = 146
ssatype(ctx, idx) = Any
node = :(goto %148 if not %145)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => ""], Any[]))idx = 147
ssatype(ctx, idx) = Any
node = :(goto %149)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145)], Any[]))idx = 148
ssatype(ctx, idx) = Nothing
node = :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion"))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149)], Any[]))idx = 149
ssatype(ctx, idx) = Any
node = :(goto %150)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion"))], Any[]))idx = 150
ssatype(ctx, idx) = Any
node = :(goto %151)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150)], Any[]))idx = 151
ssatype(ctx, idx) = Any
node = :(goto %152)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151)], Any[]))idx = 152
ssatype(ctx, idx) = Nothing
node = :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152)], Any[]))idx = 153
ssatype(ctx, idx) = Any
node = :(goto %154)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141))], Any[]))idx = 154
ssatype(ctx, idx) = Nothing
node = nothing
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154)], Any[]))idx = 155
ssatype(ctx, idx) = UInt64
node = :(Base.bitcast(UInt64, %43))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing], Any[]))idx = 156
ssatype(ctx, idx) = UInt64
node = :(Base.sub_int(%155, 0x0000000000000001))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => ""], Any[]))idx = 157
ssatype(ctx, idx) = Int64
node = :(Base.arraylen(_2))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => ""], Any[]))idx = 158
ssatype(ctx, idx) = Bool
node = :(Base.sle_int(0, %157))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => ""], Any[]))idx = 159
ssatype(ctx, idx) = UInt64
node = :(Base.bitcast(UInt64, %157))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => ""], Any[]))idx = 160
ssatype(ctx, idx) = Bool
node = :(Base.ult_int(%156, %159))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => ""], Any[]))idx = 161
ssatype(ctx, idx) = Bool
node = :(Base.and_int(%158, %160))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => ""], Any[]))idx = 162
ssatype(ctx, idx) = Any
node = :(goto %166 if not %161)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => "", :idx => 161, :ssavalue => Bool, :node => :(Base.and_int(%158, %160)), :wasm => ""], Any[]))idx = 163
ssatype(ctx, idx) = Any
node = :(Base.arrayref(false, _2, %43))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => "", :idx => 161, :ssavalue => Bool, :node => :(Base.and_int(%158, %160)), :wasm => "", :idx => 162, :ssavalue => Any, :node => :(goto %166 if not %161)], Any[]))idx = 164
ssatype(ctx, idx) = Int64
node = :(Base.add_int(%43, 1))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => "", :idx => 161, :ssavalue => Bool, :node => :(Base.and_int(%158, %160)), :wasm => "", :idx => 162, :ssavalue => Any, :node => :(goto %166 if not %161), :idx => 163, :ssavalue => Any, :node => :(Base.arrayref(false, _2, %43)), :wasm => ""], Any[]))idx = 165
ssatype(ctx, idx) = Any
node = :(goto %167)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => "", :idx => 161, :ssavalue => Bool, :node => :(Base.and_int(%158, %160)), :wasm => "", :idx => 162, :ssavalue => Any, :node => :(goto %166 if not %161), :idx => 163, :ssavalue => Any, :node => :(Base.arrayref(false, _2, %43)), :wasm => "", :idx => 164, :ssavalue => Int64, :node => :(Base.add_int(%43, 1)), :wasm => ""], Any[]))idx = 166
ssatype(ctx, idx) = Any
node = :(goto %167)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => "", :idx => 161, :ssavalue => Bool, :node => :(Base.and_int(%158, %160)), :wasm => "", :idx => 162, :ssavalue => Any, :node => :(goto %166 if not %161), :idx => 163, :ssavalue => Any, :node => :(Base.arrayref(false, _2, %43)), :wasm => "", :idx => 164, :ssavalue => Int64, :node => :(Base.add_int(%43, 1)), :wasm => "", :idx => 165, :ssavalue => Any, :node => :(goto %167)], Any[]))idx = 167
ssatype(ctx, idx) = Bool
node = :(φ (%165 => false, %166 => true))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => "", :idx => 161, :ssavalue => Bool, :node => :(Base.and_int(%158, %160)), :wasm => "", :idx => 162, :ssavalue => Any, :node => :(goto %166 if not %161), :idx => 163, :ssavalue => Any, :node => :(Base.arrayref(false, _2, %43)), :wasm => "", :idx => 164, :ssavalue => Int64, :node => :(Base.add_int(%43, 1)), :wasm => "", :idx => 165, :ssavalue => Any, :node => :(goto %167), :idx => 166, :ssavalue => Any, :node => :(goto %167)], Any[]))idx = 168
ssatype(ctx, idx) = Any
node = :(φ (%165 => %163))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => "", :idx => 161, :ssavalue => Bool, :node => :(Base.and_int(%158, %160)), :wasm => "", :idx => 162, :ssavalue => Any, :node => :(goto %166 if not %161), :idx => 163, :ssavalue => Any, :node => :(Base.arrayref(false, _2, %43)), :wasm => "", :idx => 164, :ssavalue => Int64, :node => :(Base.add_int(%43, 1)), :wasm => "", :idx => 165, :ssavalue => Any, :node => :(goto %167), :idx => 166, :ssavalue => Any, :node => :(goto %167), :idx => 167, :ssavalue => Bool, :node => :(φ (%165 => false, %166 => true))], Any[]))idx = 169
ssatype(ctx, idx) = Int64
node = :(φ (%165 => %164))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => "", :idx => 161, :ssavalue => Bool, :node => :(Base.and_int(%158, %160)), :wasm => "", :idx => 162, :ssavalue => Any, :node => :(goto %166 if not %161), :idx => 163, :ssavalue => Any, :node => :(Base.arrayref(false, _2, %43)), :wasm => "", :idx => 164, :ssavalue => Int64, :node => :(Base.add_int(%43, 1)), :wasm => "", :idx => 165, :ssavalue => Any, :node => :(goto %167), :idx => 166, :ssavalue => Any, :node => :(goto %167), :idx => 167, :ssavalue => Bool, :node => :(φ (%165 => false, %166 => true)), :idx => 168, :ssavalue => Any, :node => :(φ (%165 => %163))], Any[]))idx = 170
ssatype(ctx, idx) = Bool
node = :(φ (%166 => true))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => "", :idx => 161, :ssavalue => Bool, :node => :(Base.and_int(%158, %160)), :wasm => "", :idx => 162, :ssavalue => Any, :node => :(goto %166 if not %161), :idx => 163, :ssavalue => Any, :node => :(Base.arrayref(false, _2, %43)), :wasm => "", :idx => 164, :ssavalue => Int64, :node => :(Base.add_int(%43, 1)), :wasm => "", :idx => 165, :ssavalue => Any, :node => :(goto %167), :idx => 166, :ssavalue => Any, :node => :(goto %167), :idx => 167, :ssavalue => Bool, :node => :(φ (%165 => false, %166 => true)), :idx => 168, :ssavalue => Any, :node => :(φ (%165 => %163)), :idx => 169, :ssavalue => Int64, :node => :(φ (%165 => %164))], Any[]))idx = 171
ssatype(ctx, idx) = Any
node = :(goto %173 if not %167)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => "", :idx => 161, :ssavalue => Bool, :node => :(Base.and_int(%158, %160)), :wasm => "", :idx => 162, :ssavalue => Any, :node => :(goto %166 if not %161), :idx => 163, :ssavalue => Any, :node => :(Base.arrayref(false, _2, %43)), :wasm => "", :idx => 164, :ssavalue => Int64, :node => :(Base.add_int(%43, 1)), :wasm => "", :idx => 165, :ssavalue => Any, :node => :(goto %167), :idx => 166, :ssavalue => Any, :node => :(goto %167), :idx => 167, :ssavalue => Bool, :node => :(φ (%165 => false, %166 => true)), :idx => 168, :ssavalue => Any, :node => :(φ (%165 => %163)), :idx => 169, :ssavalue => Int64, :node => :(φ (%165 => %164)), :idx => 170, :ssavalue => Bool, :node => :(φ (%166 => true))], Any[]))idx = 172
ssatype(ctx, idx) = Any
node = :(goto %175)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => "", :idx => 161, :ssavalue => Bool, :node => :(Base.and_int(%158, %160)), :wasm => "", :idx => 162, :ssavalue => Any, :node => :(goto %166 if not %161), :idx => 163, :ssavalue => Any, :node => :(Base.arrayref(false, _2, %43)), :wasm => "", :idx => 164, :ssavalue => Int64, :node => :(Base.add_int(%43, 1)), :wasm => "", :idx => 165, :ssavalue => Any, :node => :(goto %167), :idx => 166, :ssavalue => Any, :node => :(goto %167), :idx => 167, :ssavalue => Bool, :node => :(φ (%165 => false, %166 => true)), :idx => 168, :ssavalue => Any, :node => :(φ (%165 => %163)), :idx => 169, :ssavalue => Int64, :node => :(φ (%165 => %164)), :idx => 170, :ssavalue => Bool, :node => :(φ (%166 => true)), :idx => 171, :ssavalue => Any, :node => :(goto %173 if not %167)], Any[]))idx = 173
ssatype(ctx, idx) = Int64
node = :(Base.add_int(%42, 1))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => "", :idx => 161, :ssavalue => Bool, :node => :(Base.and_int(%158, %160)), :wasm => "", :idx => 162, :ssavalue => Any, :node => :(goto %166 if not %161), :idx => 163, :ssavalue => Any, :node => :(Base.arrayref(false, _2, %43)), :wasm => "", :idx => 164, :ssavalue => Int64, :node => :(Base.add_int(%43, 1)), :wasm => "", :idx => 165, :ssavalue => Any, :node => :(goto %167), :idx => 166, :ssavalue => Any, :node => :(goto %167), :idx => 167, :ssavalue => Bool, :node => :(φ (%165 => false, %166 => true)), :idx => 168, :ssavalue => Any, :node => :(φ (%165 => %163)), :idx => 169, :ssavalue => Int64, :node => :(φ (%165 => %164)), :idx => 170, :ssavalue => Bool, :node => :(φ (%166 => true)), :idx => 171, :ssavalue => Any, :node => :(goto %173 if not %167), :idx => 172, :ssavalue => Any, :node => :(goto %175)], Any[]))idx = 174
ssatype(ctx, idx) = Any
node = :(goto %175)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => "", :idx => 161, :ssavalue => Bool, :node => :(Base.and_int(%158, %160)), :wasm => "", :idx => 162, :ssavalue => Any, :node => :(goto %166 if not %161), :idx => 163, :ssavalue => Any, :node => :(Base.arrayref(false, _2, %43)), :wasm => "", :idx => 164, :ssavalue => Int64, :node => :(Base.add_int(%43, 1)), :wasm => "", :idx => 165, :ssavalue => Any, :node => :(goto %167), :idx => 166, :ssavalue => Any, :node => :(goto %167), :idx => 167, :ssavalue => Bool, :node => :(φ (%165 => false, %166 => true)), :idx => 168, :ssavalue => Any, :node => :(φ (%165 => %163)), :idx => 169, :ssavalue => Int64, :node => :(φ (%165 => %164)), :idx => 170, :ssavalue => Bool, :node => :(φ (%166 => true)), :idx => 171, :ssavalue => Any, :node => :(goto %173 if not %167), :idx => 172, :ssavalue => Any, :node => :(goto %175), :idx => 173, :ssavalue => Int64, :node => :(Base.add_int(%42, 1)), :wasm => ""], Any[]))idx = 175
ssatype(ctx, idx) = Int64
node = :(φ (%174 => %169))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => "", :idx => 161, :ssavalue => Bool, :node => :(Base.and_int(%158, %160)), :wasm => "", :idx => 162, :ssavalue => Any, :node => :(goto %166 if not %161), :idx => 163, :ssavalue => Any, :node => :(Base.arrayref(false, _2, %43)), :wasm => "", :idx => 164, :ssavalue => Int64, :node => :(Base.add_int(%43, 1)), :wasm => "", :idx => 165, :ssavalue => Any, :node => :(goto %167), :idx => 166, :ssavalue => Any, :node => :(goto %167), :idx => 167, :ssavalue => Bool, :node => :(φ (%165 => false, %166 => true)), :idx => 168, :ssavalue => Any, :node => :(φ (%165 => %163)), :idx => 169, :ssavalue => Int64, :node => :(φ (%165 => %164)), :idx => 170, :ssavalue => Bool, :node => :(φ (%166 => true)), :idx => 171, :ssavalue => Any, :node => :(goto %173 if not %167), :idx => 172, :ssavalue => Any, :node => :(goto %175), :idx => 173, :ssavalue => Int64, :node => :(Base.add_int(%42, 1)), :wasm => "", :idx => 174, :ssavalue => Any, :node => :(goto %175)], Any[]))idx = 176
ssatype(ctx, idx) = Int64
node = :(φ (%174 => %173))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => "", :idx => 161, :ssavalue => Bool, :node => :(Base.and_int(%158, %160)), :wasm => "", :idx => 162, :ssavalue => Any, :node => :(goto %166 if not %161), :idx => 163, :ssavalue => Any, :node => :(Base.arrayref(false, _2, %43)), :wasm => "", :idx => 164, :ssavalue => Int64, :node => :(Base.add_int(%43, 1)), :wasm => "", :idx => 165, :ssavalue => Any, :node => :(goto %167), :idx => 166, :ssavalue => Any, :node => :(goto %167), :idx => 167, :ssavalue => Bool, :node => :(φ (%165 => false, %166 => true)), :idx => 168, :ssavalue => Any, :node => :(φ (%165 => %163)), :idx => 169, :ssavalue => Int64, :node => :(φ (%165 => %164)), :idx => 170, :ssavalue => Bool, :node => :(φ (%166 => true)), :idx => 171, :ssavalue => Any, :node => :(goto %173 if not %167), :idx => 172, :ssavalue => Any, :node => :(goto %175), :idx => 173, :ssavalue => Int64, :node => :(Base.add_int(%42, 1)), :wasm => "", :idx => 174, :ssavalue => Any, :node => :(goto %175), :idx => 175, :ssavalue => Int64, :node => :(φ (%174 => %169))], Any[]))idx = 177
ssatype(ctx, idx) = Any
node = :(φ (%174 => %168))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => "", :idx => 161, :ssavalue => Bool, :node => :(Base.and_int(%158, %160)), :wasm => "", :idx => 162, :ssavalue => Any, :node => :(goto %166 if not %161), :idx => 163, :ssavalue => Any, :node => :(Base.arrayref(false, _2, %43)), :wasm => "", :idx => 164, :ssavalue => Int64, :node => :(Base.add_int(%43, 1)), :wasm => "", :idx => 165, :ssavalue => Any, :node => :(goto %167), :idx => 166, :ssavalue => Any, :node => :(goto %167), :idx => 167, :ssavalue => Bool, :node => :(φ (%165 => false, %166 => true)), :idx => 168, :ssavalue => Any, :node => :(φ (%165 => %163)), :idx => 169, :ssavalue => Int64, :node => :(φ (%165 => %164)), :idx => 170, :ssavalue => Bool, :node => :(φ (%166 => true)), :idx => 171, :ssavalue => Any, :node => :(goto %173 if not %167), :idx => 172, :ssavalue => Any, :node => :(goto %175), :idx => 173, :ssavalue => Int64, :node => :(Base.add_int(%42, 1)), :wasm => "", :idx => 174, :ssavalue => Any, :node => :(goto %175), :idx => 175, :ssavalue => Int64, :node => :(φ (%174 => %169)), :idx => 176, :ssavalue => Int64, :node => :(φ (%174 => %173))], Any[]))idx = 178
ssatype(ctx, idx) = Int64
node = :(φ (%174 => %42))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => "", :idx => 161, :ssavalue => Bool, :node => :(Base.and_int(%158, %160)), :wasm => "", :idx => 162, :ssavalue => Any, :node => :(goto %166 if not %161), :idx => 163, :ssavalue => Any, :node => :(Base.arrayref(false, _2, %43)), :wasm => "", :idx => 164, :ssavalue => Int64, :node => :(Base.add_int(%43, 1)), :wasm => "", :idx => 165, :ssavalue => Any, :node => :(goto %167), :idx => 166, :ssavalue => Any, :node => :(goto %167), :idx => 167, :ssavalue => Bool, :node => :(φ (%165 => false, %166 => true)), :idx => 168, :ssavalue => Any, :node => :(φ (%165 => %163)), :idx => 169, :ssavalue => Int64, :node => :(φ (%165 => %164)), :idx => 170, :ssavalue => Bool, :node => :(φ (%166 => true)), :idx => 171, :ssavalue => Any, :node => :(goto %173 if not %167), :idx => 172, :ssavalue => Any, :node => :(goto %175), :idx => 173, :ssavalue => Int64, :node => :(Base.add_int(%42, 1)), :wasm => "", :idx => 174, :ssavalue => Any, :node => :(goto %175), :idx => 175, :ssavalue => Int64, :node => :(φ (%174 => %169)), :idx => 176, :ssavalue => Int64, :node => :(φ (%174 => %173)), :idx => 177, :ssavalue => Any, :node => :(φ (%174 => %168))], Any[]))idx = 179
ssatype(ctx, idx) = Bool
node = :(φ (%172 => %170, %174 => false))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => "", :idx => 161, :ssavalue => Bool, :node => :(Base.and_int(%158, %160)), :wasm => "", :idx => 162, :ssavalue => Any, :node => :(goto %166 if not %161), :idx => 163, :ssavalue => Any, :node => :(Base.arrayref(false, _2, %43)), :wasm => "", :idx => 164, :ssavalue => Int64, :node => :(Base.add_int(%43, 1)), :wasm => "", :idx => 165, :ssavalue => Any, :node => :(goto %167), :idx => 166, :ssavalue => Any, :node => :(goto %167), :idx => 167, :ssavalue => Bool, :node => :(φ (%165 => false, %166 => true)), :idx => 168, :ssavalue => Any, :node => :(φ (%165 => %163)), :idx => 169, :ssavalue => Int64, :node => :(φ (%165 => %164)), :idx => 170, :ssavalue => Bool, :node => :(φ (%166 => true)), :idx => 171, :ssavalue => Any, :node => :(goto %173 if not %167), :idx => 172, :ssavalue => Any, :node => :(goto %175), :idx => 173, :ssavalue => Int64, :node => :(Base.add_int(%42, 1)), :wasm => "", :idx => 174, :ssavalue => Any, :node => :(goto %175), :idx => 175, :ssavalue => Int64, :node => :(φ (%174 => %169)), :idx => 176, :ssavalue => Int64, :node => :(φ (%174 => %173)), :idx => 177, :ssavalue => Any, :node => :(φ (%174 => %168)), :idx => 178, :ssavalue => Int64, :node => :(φ (%174 => %42))], Any[]))idx = 180
ssatype(ctx, idx) = Bool
node = :(Base.not_int(%179))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => "", :idx => 161, :ssavalue => Bool, :node => :(Base.and_int(%158, %160)), :wasm => "", :idx => 162, :ssavalue => Any, :node => :(goto %166 if not %161), :idx => 163, :ssavalue => Any, :node => :(Base.arrayref(false, _2, %43)), :wasm => "", :idx => 164, :ssavalue => Int64, :node => :(Base.add_int(%43, 1)), :wasm => "", :idx => 165, :ssavalue => Any, :node => :(goto %167), :idx => 166, :ssavalue => Any, :node => :(goto %167), :idx => 167, :ssavalue => Bool, :node => :(φ (%165 => false, %166 => true)), :idx => 168, :ssavalue => Any, :node => :(φ (%165 => %163)), :idx => 169, :ssavalue => Int64, :node => :(φ (%165 => %164)), :idx => 170, :ssavalue => Bool, :node => :(φ (%166 => true)), :idx => 171, :ssavalue => Any, :node => :(goto %173 if not %167), :idx => 172, :ssavalue => Any, :node => :(goto %175), :idx => 173, :ssavalue => Int64, :node => :(Base.add_int(%42, 1)), :wasm => "", :idx => 174, :ssavalue => Any, :node => :(goto %175), :idx => 175, :ssavalue => Int64, :node => :(φ (%174 => %169)), :idx => 176, :ssavalue => Int64, :node => :(φ (%174 => %173)), :idx => 177, :ssavalue => Any, :node => :(φ (%174 => %168)), :idx => 178, :ssavalue => Int64, :node => :(φ (%174 => %42)), :idx => 179, :ssavalue => Bool, :node => :(φ (%172 => %170, %174 => false))], Any[]))idx = 181
ssatype(ctx, idx) = Any
node = :(goto %183 if not %180)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => "", :idx => 161, :ssavalue => Bool, :node => :(Base.and_int(%158, %160)), :wasm => "", :idx => 162, :ssavalue => Any, :node => :(goto %166 if not %161), :idx => 163, :ssavalue => Any, :node => :(Base.arrayref(false, _2, %43)), :wasm => "", :idx => 164, :ssavalue => Int64, :node => :(Base.add_int(%43, 1)), :wasm => "", :idx => 165, :ssavalue => Any, :node => :(goto %167), :idx => 166, :ssavalue => Any, :node => :(goto %167), :idx => 167, :ssavalue => Bool, :node => :(φ (%165 => false, %166 => true)), :idx => 168, :ssavalue => Any, :node => :(φ (%165 => %163)), :idx => 169, :ssavalue => Int64, :node => :(φ (%165 => %164)), :idx => 170, :ssavalue => Bool, :node => :(φ (%166 => true)), :idx => 171, :ssavalue => Any, :node => :(goto %173 if not %167), :idx => 172, :ssavalue => Any, :node => :(goto %175), :idx => 173, :ssavalue => Int64, :node => :(Base.add_int(%42, 1)), :wasm => "", :idx => 174, :ssavalue => Any, :node => :(goto %175), :idx => 175, :ssavalue => Int64, :node => :(φ (%174 => %169)), :idx => 176, :ssavalue => Int64, :node => :(φ (%174 => %173)), :idx => 177, :ssavalue => Any, :node => :(φ (%174 => %168)), :idx => 178, :ssavalue => Int64, :node => :(φ (%174 => %42)), :idx => 179, :ssavalue => Bool, :node => :(φ (%172 => %170, %174 => false)), :idx => 180, :ssavalue => Bool, :node => :(Base.not_int(%179)), :wasm => ""], Any[]))idx = 182
ssatype(ctx, idx) = Any
node = :(goto %40)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => "", :idx => 161, :ssavalue => Bool, :node => :(Base.and_int(%158, %160)), :wasm => "", :idx => 162, :ssavalue => Any, :node => :(goto %166 if not %161), :idx => 163, :ssavalue => Any, :node => :(Base.arrayref(false, _2, %43)), :wasm => "", :idx => 164, :ssavalue => Int64, :node => :(Base.add_int(%43, 1)), :wasm => "", :idx => 165, :ssavalue => Any, :node => :(goto %167), :idx => 166, :ssavalue => Any, :node => :(goto %167), :idx => 167, :ssavalue => Bool, :node => :(φ (%165 => false, %166 => true)), :idx => 168, :ssavalue => Any, :node => :(φ (%165 => %163)), :idx => 169, :ssavalue => Int64, :node => :(φ (%165 => %164)), :idx => 170, :ssavalue => Bool, :node => :(φ (%166 => true)), :idx => 171, :ssavalue => Any, :node => :(goto %173 if not %167), :idx => 172, :ssavalue => Any, :node => :(goto %175), :idx => 173, :ssavalue => Int64, :node => :(Base.add_int(%42, 1)), :wasm => "", :idx => 174, :ssavalue => Any, :node => :(goto %175), :idx => 175, :ssavalue => Int64, :node => :(φ (%174 => %169)), :idx => 176, :ssavalue => Int64, :node => :(φ (%174 => %173)), :idx => 177, :ssavalue => Any, :node => :(φ (%174 => %168)), :idx => 178, :ssavalue => Int64, :node => :(φ (%174 => %42)), :idx => 179, :ssavalue => Bool, :node => :(φ (%172 => %170, %174 => false)), :idx => 180, :ssavalue => Bool, :node => :(Base.not_int(%179)), :wasm => "", :idx => 181, :ssavalue => Any, :node => :(goto %183 if not %180)], Any[]))idx = 183
ssatype(ctx, idx) = Any
node = :(return %11)
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => "", :idx => 161, :ssavalue => Bool, :node => :(Base.and_int(%158, %160)), :wasm => "", :idx => 162, :ssavalue => Any, :node => :(goto %166 if not %161), :idx => 163, :ssavalue => Any, :node => :(Base.arrayref(false, _2, %43)), :wasm => "", :idx => 164, :ssavalue => Int64, :node => :(Base.add_int(%43, 1)), :wasm => "", :idx => 165, :ssavalue => Any, :node => :(goto %167), :idx => 166, :ssavalue => Any, :node => :(goto %167), :idx => 167, :ssavalue => Bool, :node => :(φ (%165 => false, %166 => true)), :idx => 168, :ssavalue => Any, :node => :(φ (%165 => %163)), :idx => 169, :ssavalue => Int64, :node => :(φ (%165 => %164)), :idx => 170, :ssavalue => Bool, :node => :(φ (%166 => true)), :idx => 171, :ssavalue => Any, :node => :(goto %173 if not %167), :idx => 172, :ssavalue => Any, :node => :(goto %175), :idx => 173, :ssavalue => Int64, :node => :(Base.add_int(%42, 1)), :wasm => "", :idx => 174, :ssavalue => Any, :node => :(goto %175), :idx => 175, :ssavalue => Int64, :node => :(φ (%174 => %169)), :idx => 176, :ssavalue => Int64, :node => :(φ (%174 => %173)), :idx => 177, :ssavalue => Any, :node => :(φ (%174 => %168)), :idx => 178, :ssavalue => Int64, :node => :(φ (%174 => %42)), :idx => 179, :ssavalue => Bool, :node => :(φ (%172 => %170, %174 => false)), :idx => 180, :ssavalue => Bool, :node => :(Base.not_int(%179)), :wasm => "", :idx => 181, :ssavalue => Any, :node => :(goto %183 if not %180), :idx => 182, :ssavalue => Any, :node => :(goto %40)], Any[]))idx = 5
ssatype(ctx, idx) = String
node = :((Core.Intrinsics.llvmcall)("(x) => x.join(\"\")", WebAssemblyCompiler.JS.String, Tuple{Externref}, %4))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ─ %1  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2))::Vector{Any}
│         Base.arrayset(true, %1, "", 1)::Vector{Any}
│         Base.arrayset(true, %1, :h1, 2)::Vector{Any}
│   %4  = invoke WebAssemblyCompiler.JS.object(%1::Vector{Any})::Externref
│   %5  = (Core.Intrinsics.llvmcall)("(x) => x.join(\"\")", WebAssemblyCompiler.JS.String, Tuple{Externref}, %4)::String
│   %6  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %7  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, %5, $(QuoteNode(NamedTuple())), %6)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %8  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %9  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "div", $(QuoteNode(NamedTuple())), %8)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %10 = invoke WebAssemblyCompiler.JS.:(var"#_#3")($(QuoteNode(Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}()))::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, %7::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "Hello there"::String, %9::Vararg{Any})::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %11 = invoke WebAssemblyCompiler.JS._string(%10::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})::String
│   %12 = (Core.Intrinsics.llvmcall)("(x) => document.getElementById(x)", WebAssemblyCompiler.JS.Externref, Tuple{String}, "myid")::Externref
│         (Core.Intrinsics.llvmcall)("(x, str) => x.innerHTML = str", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, String}, %12, %11)::Nothing
└──       return x
), Any[:idx => 1, :ssavalue => Vector{Any}, :node => :($(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2))), :wasm => "", :idx => 2, :ssavalue => Vector{Any}, :node => :(Base.arrayset(true, %1, "", 1)), :wasm => "", :idx => 3, :ssavalue => Vector{Any}, :node => :(Base.arrayset(true, %1, :h1, 2)), :wasm => "", :idx => 4, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%1)))), :wasm => ""], Any[WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => "", :idx => 161, :ssavalue => Bool, :node => :(Base.and_int(%158, %160)), :wasm => "", :idx => 162, :ssavalue => Any, :node => :(goto %166 if not %161), :idx => 163, :ssavalue => Any, :node => :(Base.arrayref(false, _2, %43)), :wasm => "", :idx => 164, :ssavalue => Int64, :node => :(Base.add_int(%43, 1)), :wasm => "", :idx => 165, :ssavalue => Any, :node => :(goto %167), :idx => 166, :ssavalue => Any, :node => :(goto %167), :idx => 167, :ssavalue => Bool, :node => :(φ (%165 => false, %166 => true)), :idx => 168, :ssavalue => Any, :node => :(φ (%165 => %163)), :idx => 169, :ssavalue => Int64, :node => :(φ (%165 => %164)), :idx => 170, :ssavalue => Bool, :node => :(φ (%166 => true)), :idx => 171, :ssavalue => Any, :node => :(goto %173 if not %167), :idx => 172, :ssavalue => Any, :node => :(goto %175), :idx => 173, :ssavalue => Int64, :node => :(Base.add_int(%42, 1)), :wasm => "", :idx => 174, :ssavalue => Any, :node => :(goto %175), :idx => 175, :ssavalue => Int64, :node => :(φ (%174 => %169)), :idx => 176, :ssavalue => Int64, :node => :(φ (%174 => %173)), :idx => 177, :ssavalue => Any, :node => :(φ (%174 => %168)), :idx => 178, :ssavalue => Int64, :node => :(φ (%174 => %42)), :idx => 179, :ssavalue => Bool, :node => :(φ (%172 => %170, %174 => false)), :idx => 180, :ssavalue => Bool, :node => :(Base.not_int(%179)), :wasm => "", :idx => 181, :ssavalue => Any, :node => :(goto %183 if not %180), :idx => 182, :ssavalue => Any, :node => :(goto %40), :idx => 183, :ssavalue => Any, :node => :(return %11), :wasm => ""], Any[])]))idx = 6
ssatype(ctx, idx) = Vector{String}
node = :($(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0)))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ─ %1  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2))::Vector{Any}
│         Base.arrayset(true, %1, "", 1)::Vector{Any}
│         Base.arrayset(true, %1, :h1, 2)::Vector{Any}
│   %4  = invoke WebAssemblyCompiler.JS.object(%1::Vector{Any})::Externref
│   %5  = (Core.Intrinsics.llvmcall)("(x) => x.join(\"\")", WebAssemblyCompiler.JS.String, Tuple{Externref}, %4)::String
│   %6  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %7  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, %5, $(QuoteNode(NamedTuple())), %6)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %8  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %9  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "div", $(QuoteNode(NamedTuple())), %8)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %10 = invoke WebAssemblyCompiler.JS.:(var"#_#3")($(QuoteNode(Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}()))::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, %7::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "Hello there"::String, %9::Vararg{Any})::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %11 = invoke WebAssemblyCompiler.JS._string(%10::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})::String
│   %12 = (Core.Intrinsics.llvmcall)("(x) => document.getElementById(x)", WebAssemblyCompiler.JS.Externref, Tuple{String}, "myid")::Externref
│         (Core.Intrinsics.llvmcall)("(x, str) => x.innerHTML = str", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, String}, %12, %11)::Nothing
└──       return x
), Any[:idx => 1, :ssavalue => Vector{Any}, :node => :($(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2))), :wasm => "", :idx => 2, :ssavalue => Vector{Any}, :node => :(Base.arrayset(true, %1, "", 1)), :wasm => "", :idx => 3, :ssavalue => Vector{Any}, :node => :(Base.arrayset(true, %1, :h1, 2)), :wasm => "", :idx => 4, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%1)))), :wasm => "", :idx => 5, :ssavalue => String, :node => :((Core.Intrinsics.llvmcall)("(x) => x.join(\"\")", WebAssemblyCompiler.JS.String, Tuple{Externref}, %4)), :wasm => ""], Any[WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => "", :idx => 161, :ssavalue => Bool, :node => :(Base.and_int(%158, %160)), :wasm => "", :idx => 162, :ssavalue => Any, :node => :(goto %166 if not %161), :idx => 163, :ssavalue => Any, :node => :(Base.arrayref(false, _2, %43)), :wasm => "", :idx => 164, :ssavalue => Int64, :node => :(Base.add_int(%43, 1)), :wasm => "", :idx => 165, :ssavalue => Any, :node => :(goto %167), :idx => 166, :ssavalue => Any, :node => :(goto %167), :idx => 167, :ssavalue => Bool, :node => :(φ (%165 => false, %166 => true)), :idx => 168, :ssavalue => Any, :node => :(φ (%165 => %163)), :idx => 169, :ssavalue => Int64, :node => :(φ (%165 => %164)), :idx => 170, :ssavalue => Bool, :node => :(φ (%166 => true)), :idx => 171, :ssavalue => Any, :node => :(goto %173 if not %167), :idx => 172, :ssavalue => Any, :node => :(goto %175), :idx => 173, :ssavalue => Int64, :node => :(Base.add_int(%42, 1)), :wasm => "", :idx => 174, :ssavalue => Any, :node => :(goto %175), :idx => 175, :ssavalue => Int64, :node => :(φ (%174 => %169)), :idx => 176, :ssavalue => Int64, :node => :(φ (%174 => %173)), :idx => 177, :ssavalue => Any, :node => :(φ (%174 => %168)), :idx => 178, :ssavalue => Int64, :node => :(φ (%174 => %42)), :idx => 179, :ssavalue => Bool, :node => :(φ (%172 => %170, %174 => false)), :idx => 180, :ssavalue => Bool, :node => :(Base.not_int(%179)), :wasm => "", :idx => 181, :ssavalue => Any, :node => :(goto %183 if not %180), :idx => 182, :ssavalue => Any, :node => :(goto %40), :idx => 183, :ssavalue => Any, :node => :(return %11), :wasm => ""], Any[])]))type = WebAssemblyCompiler.FakeArrayWrapper{String}
idx = 7
ssatype(ctx, idx) = WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
node = :(%new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, %5, $(QuoteNode(NamedTuple())), %6))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ─ %1  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2))::Vector{Any}
│         Base.arrayset(true, %1, "", 1)::Vector{Any}
│         Base.arrayset(true, %1, :h1, 2)::Vector{Any}
│   %4  = invoke WebAssemblyCompiler.JS.object(%1::Vector{Any})::Externref
│   %5  = (Core.Intrinsics.llvmcall)("(x) => x.join(\"\")", WebAssemblyCompiler.JS.String, Tuple{Externref}, %4)::String
│   %6  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %7  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, %5, $(QuoteNode(NamedTuple())), %6)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %8  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %9  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "div", $(QuoteNode(NamedTuple())), %8)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %10 = invoke WebAssemblyCompiler.JS.:(var"#_#3")($(QuoteNode(Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}()))::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, %7::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "Hello there"::String, %9::Vararg{Any})::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %11 = invoke WebAssemblyCompiler.JS._string(%10::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})::String
│   %12 = (Core.Intrinsics.llvmcall)("(x) => document.getElementById(x)", WebAssemblyCompiler.JS.Externref, Tuple{String}, "myid")::Externref
│         (Core.Intrinsics.llvmcall)("(x, str) => x.innerHTML = str", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, String}, %12, %11)::Nothing
└──       return x
), Any[:idx => 1, :ssavalue => Vector{Any}, :node => :($(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2))), :wasm => "", :idx => 2, :ssavalue => Vector{Any}, :node => :(Base.arrayset(true, %1, "", 1)), :wasm => "", :idx => 3, :ssavalue => Vector{Any}, :node => :(Base.arrayset(true, %1, :h1, 2)), :wasm => "", :idx => 4, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%1)))), :wasm => "", :idx => 5, :ssavalue => String, :node => :((Core.Intrinsics.llvmcall)("(x) => x.join(\"\")", WebAssemblyCompiler.JS.String, Tuple{Externref}, %4)), :wasm => "", :idx => 6, :ssavalue => Vector{String}, :node => :($(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))), :wasm => ""], Any[WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => "", :idx => 161, :ssavalue => Bool, :node => :(Base.and_int(%158, %160)), :wasm => "", :idx => 162, :ssavalue => Any, :node => :(goto %166 if not %161), :idx => 163, :ssavalue => Any, :node => :(Base.arrayref(false, _2, %43)), :wasm => "", :idx => 164, :ssavalue => Int64, :node => :(Base.add_int(%43, 1)), :wasm => "", :idx => 165, :ssavalue => Any, :node => :(goto %167), :idx => 166, :ssavalue => Any, :node => :(goto %167), :idx => 167, :ssavalue => Bool, :node => :(φ (%165 => false, %166 => true)), :idx => 168, :ssavalue => Any, :node => :(φ (%165 => %163)), :idx => 169, :ssavalue => Int64, :node => :(φ (%165 => %164)), :idx => 170, :ssavalue => Bool, :node => :(φ (%166 => true)), :idx => 171, :ssavalue => Any, :node => :(goto %173 if not %167), :idx => 172, :ssavalue => Any, :node => :(goto %175), :idx => 173, :ssavalue => Int64, :node => :(Base.add_int(%42, 1)), :wasm => "", :idx => 174, :ssavalue => Any, :node => :(goto %175), :idx => 175, :ssavalue => Int64, :node => :(φ (%174 => %169)), :idx => 176, :ssavalue => Int64, :node => :(φ (%174 => %173)), :idx => 177, :ssavalue => Any, :node => :(φ (%174 => %168)), :idx => 178, :ssavalue => Int64, :node => :(φ (%174 => %42)), :idx => 179, :ssavalue => Bool, :node => :(φ (%172 => %170, %174 => false)), :idx => 180, :ssavalue => Bool, :node => :(Base.not_int(%179)), :wasm => "", :idx => 181, :ssavalue => Any, :node => :(goto %183 if not %180), :idx => 182, :ssavalue => Any, :node => :(goto %40), :idx => 183, :ssavalue => Any, :node => :(return %11), :wasm => ""], Any[])]))type = NamedTuple{(), Tuple{}}
type = WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
idx = 8
ssatype(ctx, idx) = Vector{String}
node = :($(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0)))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ─ %1  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2))::Vector{Any}
│         Base.arrayset(true, %1, "", 1)::Vector{Any}
│         Base.arrayset(true, %1, :h1, 2)::Vector{Any}
│   %4  = invoke WebAssemblyCompiler.JS.object(%1::Vector{Any})::Externref
│   %5  = (Core.Intrinsics.llvmcall)("(x) => x.join(\"\")", WebAssemblyCompiler.JS.String, Tuple{Externref}, %4)::String
│   %6  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %7  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, %5, $(QuoteNode(NamedTuple())), %6)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %8  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %9  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "div", $(QuoteNode(NamedTuple())), %8)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %10 = invoke WebAssemblyCompiler.JS.:(var"#_#3")($(QuoteNode(Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}()))::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, %7::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "Hello there"::String, %9::Vararg{Any})::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %11 = invoke WebAssemblyCompiler.JS._string(%10::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})::String
│   %12 = (Core.Intrinsics.llvmcall)("(x) => document.getElementById(x)", WebAssemblyCompiler.JS.Externref, Tuple{String}, "myid")::Externref
│         (Core.Intrinsics.llvmcall)("(x, str) => x.innerHTML = str", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, String}, %12, %11)::Nothing
└──       return x
), Any[:idx => 1, :ssavalue => Vector{Any}, :node => :($(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2))), :wasm => "", :idx => 2, :ssavalue => Vector{Any}, :node => :(Base.arrayset(true, %1, "", 1)), :wasm => "", :idx => 3, :ssavalue => Vector{Any}, :node => :(Base.arrayset(true, %1, :h1, 2)), :wasm => "", :idx => 4, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%1)))), :wasm => "", :idx => 5, :ssavalue => String, :node => :((Core.Intrinsics.llvmcall)("(x) => x.join(\"\")", WebAssemblyCompiler.JS.String, Tuple{Externref}, %4)), :wasm => "", :idx => 6, :ssavalue => Vector{String}, :node => :($(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))), :wasm => "", :idx => 7, :ssavalue => WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, :node => :(%new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, %5, $(QuoteNode(NamedTuple())), %6)), :wasm => ""], Any[WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => "", :idx => 161, :ssavalue => Bool, :node => :(Base.and_int(%158, %160)), :wasm => "", :idx => 162, :ssavalue => Any, :node => :(goto %166 if not %161), :idx => 163, :ssavalue => Any, :node => :(Base.arrayref(false, _2, %43)), :wasm => "", :idx => 164, :ssavalue => Int64, :node => :(Base.add_int(%43, 1)), :wasm => "", :idx => 165, :ssavalue => Any, :node => :(goto %167), :idx => 166, :ssavalue => Any, :node => :(goto %167), :idx => 167, :ssavalue => Bool, :node => :(φ (%165 => false, %166 => true)), :idx => 168, :ssavalue => Any, :node => :(φ (%165 => %163)), :idx => 169, :ssavalue => Int64, :node => :(φ (%165 => %164)), :idx => 170, :ssavalue => Bool, :node => :(φ (%166 => true)), :idx => 171, :ssavalue => Any, :node => :(goto %173 if not %167), :idx => 172, :ssavalue => Any, :node => :(goto %175), :idx => 173, :ssavalue => Int64, :node => :(Base.add_int(%42, 1)), :wasm => "", :idx => 174, :ssavalue => Any, :node => :(goto %175), :idx => 175, :ssavalue => Int64, :node => :(φ (%174 => %169)), :idx => 176, :ssavalue => Int64, :node => :(φ (%174 => %173)), :idx => 177, :ssavalue => Any, :node => :(φ (%174 => %168)), :idx => 178, :ssavalue => Int64, :node => :(φ (%174 => %42)), :idx => 179, :ssavalue => Bool, :node => :(φ (%172 => %170, %174 => false)), :idx => 180, :ssavalue => Bool, :node => :(Base.not_int(%179)), :wasm => "", :idx => 181, :ssavalue => Any, :node => :(goto %183 if not %180), :idx => 182, :ssavalue => Any, :node => :(goto %40), :idx => 183, :ssavalue => Any, :node => :(return %11), :wasm => ""], Any[])]))idx = 9
ssatype(ctx, idx) = WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
node = :(%new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "div", $(QuoteNode(NamedTuple())), %8))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ─ %1  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2))::Vector{Any}
│         Base.arrayset(true, %1, "", 1)::Vector{Any}
│         Base.arrayset(true, %1, :h1, 2)::Vector{Any}
│   %4  = invoke WebAssemblyCompiler.JS.object(%1::Vector{Any})::Externref
│   %5  = (Core.Intrinsics.llvmcall)("(x) => x.join(\"\")", WebAssemblyCompiler.JS.String, Tuple{Externref}, %4)::String
│   %6  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %7  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, %5, $(QuoteNode(NamedTuple())), %6)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %8  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %9  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "div", $(QuoteNode(NamedTuple())), %8)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %10 = invoke WebAssemblyCompiler.JS.:(var"#_#3")($(QuoteNode(Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}()))::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, %7::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "Hello there"::String, %9::Vararg{Any})::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %11 = invoke WebAssemblyCompiler.JS._string(%10::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})::String
│   %12 = (Core.Intrinsics.llvmcall)("(x) => document.getElementById(x)", WebAssemblyCompiler.JS.Externref, Tuple{String}, "myid")::Externref
│         (Core.Intrinsics.llvmcall)("(x, str) => x.innerHTML = str", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, String}, %12, %11)::Nothing
└──       return x
), Any[:idx => 1, :ssavalue => Vector{Any}, :node => :($(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2))), :wasm => "", :idx => 2, :ssavalue => Vector{Any}, :node => :(Base.arrayset(true, %1, "", 1)), :wasm => "", :idx => 3, :ssavalue => Vector{Any}, :node => :(Base.arrayset(true, %1, :h1, 2)), :wasm => "", :idx => 4, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%1)))), :wasm => "", :idx => 5, :ssavalue => String, :node => :((Core.Intrinsics.llvmcall)("(x) => x.join(\"\")", WebAssemblyCompiler.JS.String, Tuple{Externref}, %4)), :wasm => "", :idx => 6, :ssavalue => Vector{String}, :node => :($(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))), :wasm => "", :idx => 7, :ssavalue => WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, :node => :(%new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, %5, $(QuoteNode(NamedTuple())), %6)), :wasm => "", :idx => 8, :ssavalue => Vector{String}, :node => :($(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))), :wasm => ""], Any[WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => "", :idx => 161, :ssavalue => Bool, :node => :(Base.and_int(%158, %160)), :wasm => "", :idx => 162, :ssavalue => Any, :node => :(goto %166 if not %161), :idx => 163, :ssavalue => Any, :node => :(Base.arrayref(false, _2, %43)), :wasm => "", :idx => 164, :ssavalue => Int64, :node => :(Base.add_int(%43, 1)), :wasm => "", :idx => 165, :ssavalue => Any, :node => :(goto %167), :idx => 166, :ssavalue => Any, :node => :(goto %167), :idx => 167, :ssavalue => Bool, :node => :(φ (%165 => false, %166 => true)), :idx => 168, :ssavalue => Any, :node => :(φ (%165 => %163)), :idx => 169, :ssavalue => Int64, :node => :(φ (%165 => %164)), :idx => 170, :ssavalue => Bool, :node => :(φ (%166 => true)), :idx => 171, :ssavalue => Any, :node => :(goto %173 if not %167), :idx => 172, :ssavalue => Any, :node => :(goto %175), :idx => 173, :ssavalue => Int64, :node => :(Base.add_int(%42, 1)), :wasm => "", :idx => 174, :ssavalue => Any, :node => :(goto %175), :idx => 175, :ssavalue => Int64, :node => :(φ (%174 => %169)), :idx => 176, :ssavalue => Int64, :node => :(φ (%174 => %173)), :idx => 177, :ssavalue => Any, :node => :(φ (%174 => %168)), :idx => 178, :ssavalue => Int64, :node => :(φ (%174 => %42)), :idx => 179, :ssavalue => Bool, :node => :(φ (%172 => %170, %174 => false)), :idx => 180, :ssavalue => Bool, :node => :(Base.not_int(%179)), :wasm => "", :idx => 181, :ssavalue => Any, :node => :(goto %183 if not %180), :idx => 182, :ssavalue => Any, :node => :(goto %40), :idx => 183, :ssavalue => Any, :node => :(return %11), :wasm => ""], Any[])]))typeof(gval) = String
idx = 10
ssatype(ctx, idx) = WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
node = :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.var"#_#3"(::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, ::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, ::String, ::Vararg{Any}), :(WebAssemblyCompiler.JS.:(var"#_#3")), :($(QuoteNode(Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}()))), :(%7), "Hello there", :(%9))))
Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ─ %1  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2))::Vector{Any}
│         Base.arrayset(true, %1, "", 1)::Vector{Any}
│         Base.arrayset(true, %1, :h1, 2)::Vector{Any}
│   %4  = invoke WebAssemblyCompiler.JS.object(%1::Vector{Any})::Externref
│   %5  = (Core.Intrinsics.llvmcall)("(x) => x.join(\"\")", WebAssemblyCompiler.JS.String, Tuple{Externref}, %4)::String
│   %6  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %7  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, %5, $(QuoteNode(NamedTuple())), %6)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %8  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %9  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "div", $(QuoteNode(NamedTuple())), %8)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %10 = invoke WebAssemblyCompiler.JS.:(var"#_#3")($(QuoteNode(Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}()))::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, %7::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "Hello there"::String, %9::Vararg{Any})::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %11 = invoke WebAssemblyCompiler.JS._string(%10::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})::String
│   %12 = (Core.Intrinsics.llvmcall)("(x) => document.getElementById(x)", WebAssemblyCompiler.JS.Externref, Tuple{String}, "myid")::Externref
│         (Core.Intrinsics.llvmcall)("(x, str) => x.innerHTML = str", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, String}, %12, %11)::Nothing
└──       return x
), Any[:idx => 1, :ssavalue => Vector{Any}, :node => :($(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2))), :wasm => "", :idx => 2, :ssavalue => Vector{Any}, :node => :(Base.arrayset(true, %1, "", 1)), :wasm => "", :idx => 3, :ssavalue => Vector{Any}, :node => :(Base.arrayset(true, %1, :h1, 2)), :wasm => "", :idx => 4, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%1)))), :wasm => "", :idx => 5, :ssavalue => String, :node => :((Core.Intrinsics.llvmcall)("(x) => x.join(\"\")", WebAssemblyCompiler.JS.String, Tuple{Externref}, %4)), :wasm => "", :idx => 6, :ssavalue => Vector{String}, :node => :($(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))), :wasm => "", :idx => 7, :ssavalue => WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, :node => :(%new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, %5, $(QuoteNode(NamedTuple())), %6)), :wasm => "", :idx => 8, :ssavalue => Vector{String}, :node => :($(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))), :wasm => "", :idx => 9, :ssavalue => WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, :node => :(%new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "div", $(QuoteNode(NamedTuple())), %8)), :wasm => ""], Any[WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => "", :idx => 161, :ssavalue => Bool, :node => :(Base.and_int(%158, %160)), :wasm => "", :idx => 162, :ssavalue => Any, :node => :(goto %166 if not %161), :idx => 163, :ssavalue => Any, :node => :(Base.arrayref(false, _2, %43)), :wasm => "", :idx => 164, :ssavalue => Int64, :node => :(Base.add_int(%43, 1)), :wasm => "", :idx => 165, :ssavalue => Any, :node => :(goto %167), :idx => 166, :ssavalue => Any, :node => :(goto %167), :idx => 167, :ssavalue => Bool, :node => :(φ (%165 => false, %166 => true)), :idx => 168, :ssavalue => Any, :node => :(φ (%165 => %163)), :idx => 169, :ssavalue => Int64, :node => :(φ (%165 => %164)), :idx => 170, :ssavalue => Bool, :node => :(φ (%166 => true)), :idx => 171, :ssavalue => Any, :node => :(goto %173 if not %167), :idx => 172, :ssavalue => Any, :node => :(goto %175), :idx => 173, :ssavalue => Int64, :node => :(Base.add_int(%42, 1)), :wasm => "", :idx => 174, :ssavalue => Any, :node => :(goto %175), :idx => 175, :ssavalue => Int64, :node => :(φ (%174 => %169)), :idx => 176, :ssavalue => Int64, :node => :(φ (%174 => %173)), :idx => 177, :ssavalue => Any, :node => :(φ (%174 => %168)), :idx => 178, :ssavalue => Int64, :node => :(φ (%174 => %42)), :idx => 179, :ssavalue => Bool, :node => :(φ (%172 => %170, %174 => false)), :idx => 180, :ssavalue => Bool, :node => :(Base.not_int(%179)), :wasm => "", :idx => 181, :ssavalue => Any, :node => :(goto %183 if not %180), :idx => 182, :ssavalue => Any, :node => :(goto %40), :idx => 183, :ssavalue => Any, :node => :(return %11), :wasm => ""], Any[])]))type = Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}
type = Tuple{String, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}}
typeof(gval) = String
newsig = Tuple{WebAssemblyCompiler.JS.var"##_#3", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, Tuple{String, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}}}
newci = CodeInfo(
1 ── %1  = WebAssemblyCompiler.JS.getfield(o, :children)::Vector{String}
│    %2  = Base.arraysize(%1, 1)::Int64
│    %3  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, :(%2), :(%2)))::Vector{String}
│    %4  = Base.arraylen(%1)::Int64
│    %5  = Core.trunc_int(Int32, %4)::Int32
│    %6  = Core.sext_int(Int64, %5)::Int64
│    %7  = Core.eq_int(%4, %6)::Bool
└───       goto #3 if not %7
2 ──       goto #4
3 ──       (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─       goto #5
5 ──       goto #6
6 ──       goto #7
7 ──       goto #8
8 ──       goto #9
9 ──       $(Expr(:foreigncall, :(:_jl_array_copy), Nothing, svec(Vector{String}, Vector{String}, Int32), 0, :(:ccall), :(%1), :(%3), :(%5), :(%1), :(%3), :(%5)))::Nothing
└───       goto #10
10 ─ %18 = Base.getfield(x, 1, false)::String
└───       goto #24 if not true
11 ┄ %20 = φ (#10 => %18, #23 => %50)::Union{String, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}}
│    %21 = φ (#10 => 2, #23 => %51)::Int64
│    %22 = WebAssemblyCompiler.JS.push!::typeof(push!)
│    %23 = (isa)(%20, String)::Bool
└───       goto #13 if not %23
12 ─ %25 = π (%20, String)
│          $(Expr(:foreigncall, :(:jl_array_grow_end), Nothing, svec(Any, UInt64), 0, :(:ccall), :(%3), 0x0000000000000001, 0x0000000000000001))::Nothing
│    %27 = Base.arraysize(%3, 1)::Int64
│    %28 = Base.slt_int(%27, 0)::Bool
│    %29 = Core.ifelse(%28, 0, %27)::Int64
│          Base.arrayset(false, %3, %25, %29)::Vector{String}
└───       goto #16
13 ─ %32 = (isa)(%20, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})::Bool
└───       goto #15 if not %32
14 ─ %34 = π (%20, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})
│          invoke %22(%3::Vector{String}, %34::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})::Any
└───       goto #16
15 ─       Core.throw(ErrorException("fatal error in type inference (type bound)"))::Union{}
└───       unreachable
16 ┄ %39 = Base.sle_int(1, %21)::Bool
└───       goto #18 if not %39
17 ─ %41 = Base.sle_int(%21, 2)::Bool
└───       goto #19
18 ─       nothing::Nothing
19 ┄ %44 = φ (#17 => %41, #18 => false)::Bool
└───       goto #21 if not %44
20 ─ %46 = Base.getfield(x, %21, false)::Union{String, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}}
│    %47 = Base.add_int(%21, 1)::Int64
└───       goto #22
21 ─       goto #22
22 ┄ %50 = φ (#20 => %46)::Union{String, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}}
│    %51 = φ (#20 => %47)::Int64
│    %52 = φ (#20 => false, #21 => true)::Bool
│    %53 = Base.not_int(%52)::Bool
└───       goto #24 if not %53
23 ─       goto #11
24 ┄ %56 = WebAssemblyCompiler.JS.getfield(o, :tag)::String
│    %57 = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, %56, $(QuoteNode(NamedTuple())), %3)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
└───       return %57
)
(ctx, parent) = (WebAssemblyCompiler.CompilerContext(Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenModule} @0x0000000004f2bd00, Dict{DataType, String}(Tuple{typeof(fcw2), Float64} => "fcw2", Tuple{typeof(WebAssemblyCompiler.JS.object), Vector{Any}} => "julia_objectVector_Any_", Tuple{WebAssemblyCompiler.JS.var"##_#3", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, Tuple{String, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}}} => "julia____3Base_Pairs_Symbol__Union____Tuple____NamedTuple_____Tuple____WebAssemblyCompiler_JS_Node_NamedTuple_____Tuple____Tuple_String__WebAssemblyCompiler_JS_Node_NamedTuple_____Tuple_____"), Dict{String, DataType}("julia_objectVector_Any_" => Tuple{typeof(WebAssemblyCompiler.JS.object), Vector{Any}}, "fcw2" => Tuple{typeof(fcw2), Float64}, "julia____3Base_Pairs_Symbol__Union____Tuple____NamedTuple_____Tuple____WebAssemblyCompiler_JS_Node_NamedTuple_____Tuple____Tuple_String__WebAssemblyCompiler_JS_Node_NamedTuple_____Tuple_____" => Tuple{WebAssemblyCompiler.JS.var"##_#3", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, Tuple{String, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}}}), Dict{String, Any}("n____Array_n_ExternrefInt32" => "n => Array(n)", "_v__i__x_____v_i____xNothingExternrefInt32Int32" => "(v, i, x) => v[i] = x", "_v__i__x_____v_i____xNothingExternrefInt32Externref" => "(v, i, x) => v[i] = x", "_v__i__x_____v_i____xNothingExternrefInt32Float64" => "(v, i, x) => v[i] = x", "_x_____x_join____StringExternref" => "(x) => x.join(\"\")", "x____console_log_x_NothingString" => "x => console.log(x)", "_v__i__x_____v_i____xNothingExternrefInt32Bool" => "(v, i, x) => v[i] = x", "_v__i__x_____v_i____xNothingExternrefInt32String" => "(v, i, x) => v[i] = x"), Dict{Any, UInt64}(Nothing => 0x0000000004063190, Symbol => 0x0000000004987990, Int64 => 0x0000000000000003, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}} => 0x0000000003467ea0, WebAssemblyCompiler.Buffer{Any} => 0x00000000033967f0, WebAssemblyCompiler.Buffer{String} => 0x00000000062feb90, Float32 => 0x0000000000000004, NamedTuple{(), Tuple{}} => 0x0000000004063190, Base.RefValue{Int64} => 0x0000000004f5e150, WebAssemblyCompiler.Box{Float64} => 0x000000000578cb50, WebAssemblyCompiler.Box{Int32} => 0x0000000003f6ceb0, UInt32 => 0x0000000000000002, Int32 => 0x0000000000000002, UInt64 => 0x0000000000000003, WebAssemblyCompiler.Box{String} => 0x0000000003201b20, String => 0x0000000004987990, Union{} => 0x0000000000000000, UInt8 => 0x0000000000000002, WebAssemblyCompiler.Box{Int64} => 0x000000000577ca90, Float64 => 0x0000000000000005, Bool => 0x0000000000000002, Vector{String} => 0x0000000003467d40, WebAssemblyCompiler.FakeArrayWrapper{Any} => 0x0000000004717170, Tuple{String, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}} => 0x0000000004fe28a0, WebAssemblyCompiler.FakeArrayWrapper{String} => 0x0000000003467d40, Externref => 0x000000000365dc90, WebAssemblyCompiler.Box{Bool} => 0x0000000003f6ceb0, Any => 0x000000000399cb50, Core.TypeofBottom => 0x0000000000000000, WebAssemblyCompiler.Box{Symbol} => 0x0000000003201b20, Vector{Any} => 0x0000000004717170, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}} => 0x00000000033e3580, Tuple{} => 0x0000000004a325c0), Dict{UInt64, Any}(0xf1921f19227030ac => Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression} @0x00000000051b1f00, 0x81d5224790f6ea44 => Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression} @0x00000000051b2078, 0x3f032e8f157c150c => Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression} @0x00000000062445b0, 0x7f790eeb6f530353 => Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression} @0x00000000051b2398, 0xfd943c78b7c1d3b1 => Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression} @0x00000000062443c0), CodeInfo(
1 ── %1  = WebAssemblyCompiler.JS.getfield(o, :children)::Vector{String}
│    %2  = Base.arraysize(%1, 1)::Int64
│    %3  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, :(%2), :(%2)))::Vector{String}
│    %4  = Base.arraylen(%1)::Int64
│    %5  = Core.trunc_int(Int32, %4)::Int32
│    %6  = Core.sext_int(Int64, %5)::Int64
│    %7  = Core.eq_int(%4, %6)::Bool
└───       goto #3 if not %7
2 ──       goto #4
3 ──       (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─       goto #5
5 ──       goto #6
6 ──       goto #7
7 ──       goto #8
8 ──       goto #9
9 ──       $(Expr(:foreigncall, :(:_jl_array_copy), Nothing, svec(Vector{String}, Vector{String}, Int32), 0, :(:ccall), :(%1), :(%3), :(%5), :(%1), :(%3), :(%5)))::Nothing
└───       goto #10
10 ─ %18 = Base.getfield(x, 1, false)::String
└───       goto #24 if not true
11 ┄ %20 = φ (#10 => %18, #23 => %50)::Union{String, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}}
│    %21 = φ (#10 => 2, #23 => %51)::Int64
│    %22 = WebAssemblyCompiler.JS.push!::typeof(push!)
│    %23 = (isa)(%20, String)::Bool
└───       goto #13 if not %23
12 ─ %25 = π (%20, String)
│          $(Expr(:foreigncall, :(:jl_array_grow_end), Nothing, svec(Any, UInt64), 0, :(:ccall), :(%3), 0x0000000000000001, 0x0000000000000001))::Nothing
│    %27 = Base.arraysize(%3, 1)::Int64
│    %28 = Base.slt_int(%27, 0)::Bool
│    %29 = Core.ifelse(%28, 0, %27)::Int64
│          Base.arrayset(false, %3, %25, %29)::Vector{String}
└───       goto #16
13 ─ %32 = (isa)(%20, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})::Bool
└───       goto #15 if not %32
14 ─ %34 = π (%20, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})
│          invoke %22(%3::Vector{String}, %34::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})::Any
└───       goto #16
15 ─       Core.throw(ErrorException("fatal error in type inference (type bound)"))::Union{}
└───       unreachable
16 ┄ %39 = Base.sle_int(1, %21)::Bool
└───       goto #18 if not %39
17 ─ %41 = Base.sle_int(%21, 2)::Bool
└───       goto #19
18 ─       nothing::Nothing
19 ┄ %44 = φ (#17 => %41, #18 => false)::Bool
└───       goto #21 if not %44
20 ─ %46 = Base.getfield(x, %21, false)::Union{String, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}}
│    %47 = Base.add_int(%21, 1)::Int64
└───       goto #22
21 ─       goto #22
22 ┄ %50 = φ (#20 => %46)::Union{String, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}}
│    %51 = φ (#20 => %47)::Int64
│    %52 = φ (#20 => false, #21 => true)::Bool
│    %53 = Base.not_int(%52)::Bool
└───       goto #24 if not %53
23 ─       goto #11
24 ┄ %56 = WebAssemblyCompiler.JS.getfield(o, :tag)::String
│    %57 = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, %56, $(QuoteNode(NamedTuple())), %3)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
└───       return %57
), Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression}[], UInt64[], 0, Dict{Int64, Int64}(), Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1  = WebAssemblyCompiler.JS.getfield(o, :children)::Vector{String}
│    %2  = Base.arraysize(%1, 1)::Int64
│    %3  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, :(%2), :(%2)))::Vector{String}
│    %4  = Base.arraylen(%1)::Int64
│    %5  = Core.trunc_int(Int32, %4)::Int32
│    %6  = Core.sext_int(Int64, %5)::Int64
│    %7  = Core.eq_int(%4, %6)::Bool
└───       goto #3 if not %7
2 ──       goto #4
3 ──       (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─       goto #5
5 ──       goto #6
6 ──       goto #7
7 ──       goto #8
8 ──       goto #9
9 ──       $(Expr(:foreigncall, :(:_jl_array_copy), Nothing, svec(Vector{String}, Vector{String}, Int32), 0, :(:ccall), :(%1), :(%3), :(%5), :(%1), :(%3), :(%5)))::Nothing
└───       goto #10
10 ─ %18 = Base.getfield(x, 1, false)::String
└───       goto #24 if not true
11 ┄ %20 = φ (#10 => %18, #23 => %50)::Union{String, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}}
│    %21 = φ (#10 => 2, #23 => %51)::Int64
│    %22 = WebAssemblyCompiler.JS.push!::typeof(push!)
│    %23 = (isa)(%20, String)::Bool
└───       goto #13 if not %23
12 ─ %25 = π (%20, String)
│          $(Expr(:foreigncall, :(:jl_array_grow_end), Nothing, svec(Any, UInt64), 0, :(:ccall), :(%3), 0x0000000000000001, 0x0000000000000001))::Nothing
│    %27 = Base.arraysize(%3, 1)::Int64
│    %28 = Base.slt_int(%27, 0)::Bool
│    %29 = Core.ifelse(%28, 0, %27)::Int64
│          Base.arrayset(false, %3, %25, %29)::Vector{String}
└───       goto #16
13 ─ %32 = (isa)(%20, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})::Bool
└───       goto #15 if not %32
14 ─ %34 = π (%20, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})
│          invoke %22(%3::Vector{String}, %34::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})::Any
└───       goto #16
15 ─       Core.throw(ErrorException("fatal error in type inference (type bound)"))::Union{}
└───       unreachable
16 ┄ %39 = Base.sle_int(1, %21)::Bool
└───       goto #18 if not %39
17 ─ %41 = Base.sle_int(%21, 2)::Bool
└───       goto #19
18 ─       nothing::Nothing
19 ┄ %44 = φ (#17 => %41, #18 => false)::Bool
└───       goto #21 if not %44
20 ─ %46 = Base.getfield(x, %21, false)::Union{String, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}}
│    %47 = Base.add_int(%21, 1)::Int64
└───       goto #22
21 ─       goto #22
22 ┄ %50 = φ (#20 => %46)::Union{String, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}}
│    %51 = φ (#20 => %47)::Int64
│    %52 = φ (#20 => false, #21 => true)::Bool
│    %53 = Base.not_int(%52)::Bool
└───       goto #24 if not %53
23 ─       goto #11
24 ┄ %56 = WebAssemblyCompiler.JS.getfield(o, :tag)::String
│    %57 = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, %56, $(QuoteNode(NamedTuple())), %3)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
└───       return %57
), Any[], Any[]))), WebAssemblyCompiler.CompilerContext(Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenModule} @0x0000000004f2bd00, Dict{DataType, String}(Tuple{typeof(fcw2), Float64} => "fcw2", Tuple{typeof(WebAssemblyCompiler.JS.object), Vector{Any}} => "julia_objectVector_Any_", Tuple{WebAssemblyCompiler.JS.var"##_#3", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, Tuple{String, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}}} => "julia____3Base_Pairs_Symbol__Union____Tuple____NamedTuple_____Tuple____WebAssemblyCompiler_JS_Node_NamedTuple_____Tuple____Tuple_String__WebAssemblyCompiler_JS_Node_NamedTuple_____Tuple_____"), Dict{String, DataType}("julia_objectVector_Any_" => Tuple{typeof(WebAssemblyCompiler.JS.object), Vector{Any}}, "fcw2" => Tuple{typeof(fcw2), Float64}, "julia____3Base_Pairs_Symbol__Union____Tuple____NamedTuple_____Tuple____WebAssemblyCompiler_JS_Node_NamedTuple_____Tuple____Tuple_String__WebAssemblyCompiler_JS_Node_NamedTuple_____Tuple_____" => Tuple{WebAssemblyCompiler.JS.var"##_#3", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, Tuple{String, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}}}), Dict{String, Any}("n____Array_n_ExternrefInt32" => "n => Array(n)", "_v__i__x_____v_i____xNothingExternrefInt32Int32" => "(v, i, x) => v[i] = x", "_v__i__x_____v_i____xNothingExternrefInt32Externref" => "(v, i, x) => v[i] = x", "_v__i__x_____v_i____xNothingExternrefInt32Float64" => "(v, i, x) => v[i] = x", "_x_____x_join____StringExternref" => "(x) => x.join(\"\")", "x____console_log_x_NothingString" => "x => console.log(x)", "_v__i__x_____v_i____xNothingExternrefInt32Bool" => "(v, i, x) => v[i] = x", "_v__i__x_____v_i____xNothingExternrefInt32String" => "(v, i, x) => v[i] = x"), Dict{Any, UInt64}(Nothing => 0x0000000004063190, Symbol => 0x0000000004987990, Int64 => 0x0000000000000003, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}} => 0x0000000003467ea0, WebAssemblyCompiler.Buffer{Any} => 0x00000000033967f0, WebAssemblyCompiler.Buffer{String} => 0x00000000062feb90, Float32 => 0x0000000000000004, NamedTuple{(), Tuple{}} => 0x0000000004063190, Base.RefValue{Int64} => 0x0000000004f5e150, WebAssemblyCompiler.Box{Float64} => 0x000000000578cb50, WebAssemblyCompiler.Box{Int32} => 0x0000000003f6ceb0, UInt32 => 0x0000000000000002, Int32 => 0x0000000000000002, UInt64 => 0x0000000000000003, WebAssemblyCompiler.Box{String} => 0x0000000003201b20, String => 0x0000000004987990, Union{} => 0x0000000000000000, UInt8 => 0x0000000000000002, WebAssemblyCompiler.Box{Int64} => 0x000000000577ca90, Float64 => 0x0000000000000005, Bool => 0x0000000000000002, Vector{String} => 0x0000000003467d40, WebAssemblyCompiler.FakeArrayWrapper{Any} => 0x0000000004717170, Tuple{String, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}} => 0x0000000004fe28a0, WebAssemblyCompiler.FakeArrayWrapper{String} => 0x0000000003467d40, Externref => 0x000000000365dc90, WebAssemblyCompiler.Box{Bool} => 0x0000000003f6ceb0, Any => 0x000000000399cb50, Core.TypeofBottom => 0x0000000000000000, WebAssemblyCompiler.Box{Symbol} => 0x0000000003201b20, Vector{Any} => 0x0000000004717170, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}} => 0x00000000033e3580, Tuple{} => 0x0000000004a325c0), Dict{UInt64, Any}(0xf1921f19227030ac => Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression} @0x00000000051b1f00, 0x81d5224790f6ea44 => Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression} @0x00000000051b2078, 0x3f032e8f157c150c => Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression} @0x00000000062445b0, 0x7f790eeb6f530353 => Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression} @0x00000000051b2398, 0xfd943c78b7c1d3b1 => Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression} @0x00000000062443c0), CodeInfo(
1 ─ %1  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2))::Vector{Any}
│         Base.arrayset(true, %1, "", 1)::Vector{Any}
│         Base.arrayset(true, %1, :h1, 2)::Vector{Any}
│   %4  = invoke WebAssemblyCompiler.JS.object(%1::Vector{Any})::Externref
│   %5  = (Core.Intrinsics.llvmcall)("(x) => x.join(\"\")", WebAssemblyCompiler.JS.String, Tuple{Externref}, %4)::String
│   %6  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %7  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, %5, $(QuoteNode(NamedTuple())), %6)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %8  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %9  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "div", $(QuoteNode(NamedTuple())), %8)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %10 = invoke WebAssemblyCompiler.JS.:(var"#_#3")($(QuoteNode(Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}()))::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, %7::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "Hello there"::String, %9::Vararg{Any})::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %11 = invoke WebAssemblyCompiler.JS._string(%10::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})::String
│   %12 = (Core.Intrinsics.llvmcall)("(x) => document.getElementById(x)", WebAssemblyCompiler.JS.Externref, Tuple{String}, "myid")::Externref
│         (Core.Intrinsics.llvmcall)("(x, str) => x.innerHTML = str", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, String}, %12, %11)::Nothing
└──       return x
), Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression}[Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression} @0x00000000051b1de8, Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression} @0x00000000051b1f58, Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression} @0x00000000051b20d0, Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression} @0x0000000006244010, Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression} @0x00000000062440a0, Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression} @0x0000000006244188, Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression} @0x0000000006244298, Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression} @0x0000000006244380, Ptr{WebAssemblyCompiler.LibBinaryen.BinaryenExpression} @0x00000000062444b8], UInt64[0x0000000004717170, 0x000000000365dc90, 0x0000000004987990, 0x0000000003467d40, 0x00000000033e3580, 0x0000000003467d40, 0x00000000033e3580], 8, Dict(5 => 3, 4 => 2, 6 => 4, 7 => 5, 9 => 7, 8 => 6, 1 => 1), Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ─ %1  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2))::Vector{Any}
│         Base.arrayset(true, %1, "", 1)::Vector{Any}
│         Base.arrayset(true, %1, :h1, 2)::Vector{Any}
│   %4  = invoke WebAssemblyCompiler.JS.object(%1::Vector{Any})::Externref
│   %5  = (Core.Intrinsics.llvmcall)("(x) => x.join(\"\")", WebAssemblyCompiler.JS.String, Tuple{Externref}, %4)::String
│   %6  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %7  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, %5, $(QuoteNode(NamedTuple())), %6)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %8  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))::Vector{String}
│   %9  = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "div", $(QuoteNode(NamedTuple())), %8)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %10 = invoke WebAssemblyCompiler.JS.:(var"#_#3")($(QuoteNode(Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}()))::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, %7::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "Hello there"::String, %9::Vararg{Any})::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
│   %11 = invoke WebAssemblyCompiler.JS._string(%10::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})::String
│   %12 = (Core.Intrinsics.llvmcall)("(x) => document.getElementById(x)", WebAssemblyCompiler.JS.Externref, Tuple{String}, "myid")::Externref
│         (Core.Intrinsics.llvmcall)("(x, str) => x.innerHTML = str", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, String}, %12, %11)::Nothing
└──       return x
), Any[:idx => 1, :ssavalue => Vector{Any}, :node => :($(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{Any}, svec(Any, Int64), 0, :(:ccall), Vector{Any}, 2, 2))), :wasm => "", :idx => 2, :ssavalue => Vector{Any}, :node => :(Base.arrayset(true, %1, "", 1)), :wasm => "", :idx => 3, :ssavalue => Vector{Any}, :node => :(Base.arrayset(true, %1, :h1, 2)), :wasm => "", :idx => 4, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%1)))), :wasm => "", :idx => 5, :ssavalue => String, :node => :((Core.Intrinsics.llvmcall)("(x) => x.join(\"\")", WebAssemblyCompiler.JS.String, Tuple{Externref}, %4)), :wasm => "", :idx => 6, :ssavalue => Vector{String}, :node => :($(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))), :wasm => "", :idx => 7, :ssavalue => WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, :node => :(%new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, %5, $(QuoteNode(NamedTuple())), %6)), :wasm => "", :idx => 8, :ssavalue => Vector{String}, :node => :($(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, 0, 0))), :wasm => "", :idx => 9, :ssavalue => WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, :node => :(%new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, "div", $(QuoteNode(NamedTuple())), %8)), :wasm => "", :idx => 10, :ssavalue => WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.var"#_#3"(::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, ::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, ::String, ::Vararg{Any}), :(WebAssemblyCompiler.JS.:(var"#_#3")), :($(QuoteNode(Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}()))), :(%7), "Hello there", :(%9))))], Any[WebAssemblyCompiler.DB(CodeInfo(
1 ── %1   = Base.arraylen(v)::Int64
│    %2   = Core.trunc_int(Int32, %1)::Int32
│    %3   = Core.sext_int(Int64, %2)::Int64
│    %4   = Core.eq_int(%1, %3)::Bool
└───        goto #3 if not %4
2 ──        goto #4
3 ──        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─        goto #5
5 ──        goto #6
6 ──        goto #7
7 ── %11  = (Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)::Externref
│    %12  = Base.bitcast(UInt64, 1)::UInt64
│    %13  = Base.sub_int(%12, 0x0000000000000001)::UInt64
│    %14  = Base.arraylen(v)::Int64
│    %15  = Base.sle_int(0, %14)::Bool
│    %16  = Base.bitcast(UInt64, %14)::UInt64
│    %17  = Base.ult_int(%13, %16)::Bool
│    %18  = Base.and_int(%15, %17)::Bool
└───        goto #9 if not %18
8 ── %20  = Base.arrayref(false, v, 1)::Any
│    %21  = Base.add_int(1, 1)::Int64
└───        goto #10
9 ──        goto #10
10 ┄ %24  = φ (#8 => false, #9 => true)::Bool
│    %25  = φ (#8 => %20)::Any
│    %26  = φ (#8 => %21)::Int64
│    %27  = φ (#9 => true)::Bool
└───        goto #11
11 ─        goto #13 if not %24
12 ─        goto #14
13 ─        goto #14
14 ┄ %32  = φ (#12 => %27, #13 => false)::Bool
│    %33  = φ (#13 => 1)::Int64
│    %34  = φ (#13 => %25)::Any
│    %35  = φ (#13 => 2)::Int64
│    %36  = φ (#13 => %26)::Int64
└───        goto #15
15 ─ %38  = Base.not_int(%32)::Bool
└───        goto #84 if not %38
16 ┄ %40  = φ (#15 => %33, #83 => %178)::Int64
│    %41  = φ (#15 => %34, #83 => %177)::Any
│    %42  = φ (#15 => %35, #83 => %176)::Int64
│    %43  = φ (#15 => %36, #83 => %175)::Int64
│    %44  = (%41 isa WebAssemblyCompiler.Box{Float64})::Bool
└───        goto #25 if not %44
17 ─ %46  = π (%41, WebAssemblyCompiler.Box{Float64})
│    %47  = Base.getfield(%46, :x)::Float64
│    %48  = Base.sub_int(%40, 1)::Int64
│    %49  = Core.trunc_int(Int32, %48)::Int32
│    %50  = Core.sext_int(Int64, %49)::Int64
│    %51  = Core.eq_int(%48, %50)::Bool
└───        goto #19 if not %51
18 ─        goto #20
19 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
20 ┄        goto #21
21 ─        goto #22
22 ─        goto #23
23 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)::Nothing
└───        goto #24
24 ─        goto #76
25 ─ %61  = (%41 isa WebAssemblyCompiler.Box{Int32})::Bool
└───        goto #34 if not %61
26 ─ %63  = π (%41, WebAssemblyCompiler.Box{Int32})
│    %64  = Base.getfield(%63, :x)::Int32
│    %65  = Base.sub_int(%40, 1)::Int64
│    %66  = Core.trunc_int(Int32, %65)::Int32
│    %67  = Core.sext_int(Int64, %66)::Int64
│    %68  = Core.eq_int(%65, %67)::Bool
└───        goto #28 if not %68
27 ─        goto #29
28 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
29 ┄        goto #30
30 ─        goto #31
31 ─        goto #32
32 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)::Nothing
└───        goto #33
33 ─        goto #76
34 ─ %78  = (%41 isa WebAssemblyCompiler.Box{String})::Bool
└───        goto #43 if not %78
35 ─ %80  = π (%41, WebAssemblyCompiler.Box{String})
│    %81  = Base.getfield(%80, :x)::String
│    %82  = Base.sub_int(%40, 1)::Int64
│    %83  = Core.trunc_int(Int32, %82)::Int32
│    %84  = Core.sext_int(Int64, %83)::Int64
│    %85  = Core.eq_int(%82, %84)::Bool
└───        goto #37 if not %85
36 ─        goto #38
37 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
38 ┄        goto #39
39 ─        goto #40
40 ─        goto #41
41 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)::Nothing
└───        goto #42
42 ─        goto #76
43 ─ %95  = (%41 isa WebAssemblyCompiler.Box{Int64})::Bool
└───        goto #58 if not %95
44 ─ %97  = π (%41, WebAssemblyCompiler.Box{Int64})
│    %98  = Base.getfield(%97, :x)::Int64
│    %99  = Core.trunc_int(Int32, %98)::Int32
│    %100 = Core.sext_int(Int64, %99)::Int64
│    %101 = Core.eq_int(%98, %100)::Bool
└───        goto #46 if not %101
45 ─        goto #47
46 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
47 ┄        goto #48
48 ─        goto #49
49 ─        goto #50
50 ─ %108 = Base.sub_int(%40, 1)::Int64
│    %109 = Core.trunc_int(Int32, %108)::Int32
│    %110 = Core.sext_int(Int64, %109)::Int64
│    %111 = Core.eq_int(%108, %110)::Bool
└───        goto #52 if not %111
51 ─        goto #53
52 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
53 ┄        goto #54
54 ─        goto #55
55 ─        goto #56
56 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)::Nothing
└───        goto #57
57 ─        goto #76
58 ─ %121 = (%41 isa WebAssemblyCompiler.Box{Bool})::Bool
└───        goto #67 if not %121
59 ─ %123 = π (%41, WebAssemblyCompiler.Box{Bool})
│    %124 = Base.getfield(%123, :x)::Bool
│    %125 = Base.sub_int(%40, 1)::Int64
│    %126 = Core.trunc_int(Int32, %125)::Int32
│    %127 = Core.sext_int(Int64, %126)::Int64
│    %128 = Core.eq_int(%125, %127)::Bool
└───        goto #61 if not %128
60 ─        goto #62
61 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
62 ┄        goto #63
63 ─        goto #64
64 ─        goto #65
65 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)::Nothing
└───        goto #66
66 ─        goto #76
67 ─ %138 = (%41 isa Vector{Any})::Bool
└───        goto #76 if not %138
68 ─ %140 = π (%41, Vector{Any})
│    %141 = invoke WebAssemblyCompiler.JS.object(%140::Vector{Any})::Externref
│    %142 = Base.sub_int(%40, 1)::Int64
│    %143 = Core.trunc_int(Int32, %142)::Int32
│    %144 = Core.sext_int(Int64, %143)::Int64
│    %145 = Core.eq_int(%142, %144)::Bool
└───        goto #70 if not %145
69 ─        goto #71
70 ─        (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
71 ┄        goto #72
72 ─        goto #73
73 ─        goto #74
74 ─        (Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)::Nothing
└───        goto #75
75 ─        nothing::Nothing
76 ┄ %155 = Base.bitcast(UInt64, %43)::UInt64
│    %156 = Base.sub_int(%155, 0x0000000000000001)::UInt64
│    %157 = Base.arraylen(v)::Int64
│    %158 = Base.sle_int(0, %157)::Bool
│    %159 = Base.bitcast(UInt64, %157)::UInt64
│    %160 = Base.ult_int(%156, %159)::Bool
│    %161 = Base.and_int(%158, %160)::Bool
└───        goto #78 if not %161
77 ─ %163 = Base.arrayref(false, v, %43)::Any
│    %164 = Base.add_int(%43, 1)::Int64
└───        goto #79
78 ─        goto #79
79 ┄ %167 = φ (#77 => false, #78 => true)::Bool
│    %168 = φ (#77 => %163)::Any
│    %169 = φ (#77 => %164)::Int64
│    %170 = φ (#78 => true)::Bool
└───        goto #81 if not %167
80 ─        goto #82
81 ─ %173 = Base.add_int(%42, 1)::Int64
└───        goto #82
82 ┄ %175 = φ (#81 => %169)::Int64
│    %176 = φ (#81 => %173)::Int64
│    %177 = φ (#81 => %168)::Any
│    %178 = φ (#81 => %42)::Int64
│    %179 = φ (#80 => %170, #81 => false)::Bool
│    %180 = Base.not_int(%179)::Bool
└───        goto #84 if not %180
83 ─        goto #16
84 ┄        return %11
), Any[:idx => 1, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 2, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %1)), :wasm => "", :idx => 3, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %2)), :wasm => "", :idx => 4, :ssavalue => Bool, :node => :(Core.eq_int(%1, %3)), :wasm => "", :idx => 5, :ssavalue => Any, :node => :(goto %7 if not %4), :idx => 6, :ssavalue => Any, :node => :(goto %8), :idx => 7, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 8, :ssavalue => Any, :node => :(goto %9), :idx => 9, :ssavalue => Any, :node => :(goto %10), :idx => 10, :ssavalue => Any, :node => :(goto %11), :idx => 11, :ssavalue => Externref, :node => :((Core.Intrinsics.llvmcall)("n => Array(n)", WebAssemblyCompiler.JS.Externref, Tuple{Int32}, %2)), :wasm => "", :idx => 12, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, 1)), :wasm => "", :idx => 13, :ssavalue => UInt64, :node => :(Base.sub_int(%12, 0x0000000000000001)), :wasm => "", :idx => 14, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 15, :ssavalue => Bool, :node => :(Base.sle_int(0, %14)), :wasm => "", :idx => 16, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %14)), :wasm => "", :idx => 17, :ssavalue => Bool, :node => :(Base.ult_int(%13, %16)), :wasm => "", :idx => 18, :ssavalue => Bool, :node => :(Base.and_int(%15, %17)), :wasm => "", :idx => 19, :ssavalue => Any, :node => :(goto %23 if not %18), :idx => 20, :ssavalue => Any, :node => :(Base.arrayref(false, _2, 1)), :wasm => "", :idx => 21, :ssavalue => Int64, :node => :(Base.add_int(1, 1)), :wasm => "", :idx => 22, :ssavalue => Any, :node => :(goto %24), :idx => 23, :ssavalue => Any, :node => :(goto %24), :idx => 24, :ssavalue => Bool, :node => :(φ (%22 => false, %23 => true)), :idx => 25, :ssavalue => Any, :node => :(φ (%22 => %20)), :idx => 26, :ssavalue => Int64, :node => :(φ (%22 => %21)), :idx => 27, :ssavalue => Bool, :node => :(φ (%23 => true)), :idx => 28, :ssavalue => Any, :node => :(goto %29), :idx => 29, :ssavalue => Any, :node => :(goto %31 if not %24), :idx => 30, :ssavalue => Any, :node => :(goto %32), :idx => 31, :ssavalue => Any, :node => :(goto %32), :idx => 32, :ssavalue => Bool, :node => :(φ (%30 => %27, %31 => false)), :idx => 33, :ssavalue => Int64, :node => :(φ (%31 => 1)), :idx => 34, :ssavalue => Any, :node => :(φ (%31 => %25)), :idx => 35, :ssavalue => Int64, :node => :(φ (%31 => 2)), :idx => 36, :ssavalue => Int64, :node => :(φ (%31 => %26)), :idx => 37, :ssavalue => Any, :node => :(goto %38), :idx => 38, :ssavalue => Bool, :node => :(Base.not_int(%32)), :wasm => "", :idx => 39, :ssavalue => Any, :node => :(goto %183 if not %38), :idx => 40, :ssavalue => Int64, :node => :(φ (%39 => %33, %182 => %178)), :idx => 41, :ssavalue => Any, :node => :(φ (%39 => %34, %182 => %177)), :idx => 42, :ssavalue => Int64, :node => :(φ (%39 => %35, %182 => %176)), :idx => 43, :ssavalue => Int64, :node => :(φ (%39 => %36, %182 => %175)), :idx => 44, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 45, :ssavalue => Any, :node => :(goto %61 if not %44), :idx => 46, :ssavalue => WebAssemblyCompiler.Box{Float64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Float64}), :wasm => "", :idx => 47, :ssavalue => Float64, :node => :(Base.getfield(%46, :x)), :wasm => "", :idx => 48, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 49, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %48)), :wasm => "", :idx => 50, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %49)), :wasm => "", :idx => 51, :ssavalue => Bool, :node => :(Core.eq_int(%48, %50)), :wasm => "", :idx => 52, :ssavalue => Any, :node => :(goto %54 if not %51), :idx => 53, :ssavalue => Any, :node => :(goto %55), :idx => 54, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 55, :ssavalue => Any, :node => :(goto %56), :idx => 56, :ssavalue => Any, :node => :(goto %57), :idx => 57, :ssavalue => Any, :node => :(goto %58), :idx => 58, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Float64}, %11, %49, %47)), :idx => 59, :ssavalue => Any, :node => :(goto %60), :idx => 60, :ssavalue => Any, :node => :(goto %155), :idx => 61, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 62, :ssavalue => Any, :node => :(goto %78 if not %61), :idx => 63, :ssavalue => WebAssemblyCompiler.Box{Int32}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int32}), :wasm => "", :idx => 64, :ssavalue => Int32, :node => :(Base.getfield(%63, :x)), :wasm => "", :idx => 65, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 66, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %65)), :wasm => "", :idx => 67, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %66)), :wasm => "", :idx => 68, :ssavalue => Bool, :node => :(Core.eq_int(%65, %67)), :wasm => "", :idx => 69, :ssavalue => Any, :node => :(goto %71 if not %68), :idx => 70, :ssavalue => Any, :node => :(goto %72), :idx => 71, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 72, :ssavalue => Any, :node => :(goto %73), :idx => 73, :ssavalue => Any, :node => :(goto %74), :idx => 74, :ssavalue => Any, :node => :(goto %75), :idx => 75, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %66, %64)), :idx => 76, :ssavalue => Any, :node => :(goto %77), :idx => 77, :ssavalue => Any, :node => :(goto %155), :idx => 78, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 79, :ssavalue => Any, :node => :(goto %95 if not %78), :idx => 80, :ssavalue => WebAssemblyCompiler.Box{String}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{String}), :wasm => "", :idx => 81, :ssavalue => String, :node => :(Base.getfield(%80, :x)), :wasm => "", :idx => 82, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 83, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %82)), :wasm => "", :idx => 84, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %83)), :wasm => "", :idx => 85, :ssavalue => Bool, :node => :(Core.eq_int(%82, %84)), :wasm => "", :idx => 86, :ssavalue => Any, :node => :(goto %88 if not %85), :idx => 87, :ssavalue => Any, :node => :(goto %89), :idx => 88, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 89, :ssavalue => Any, :node => :(goto %90), :idx => 90, :ssavalue => Any, :node => :(goto %91), :idx => 91, :ssavalue => Any, :node => :(goto %92), :idx => 92, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, String}, %11, %83, %81)), :idx => 93, :ssavalue => Any, :node => :(goto %94), :idx => 94, :ssavalue => Any, :node => :(goto %155), :idx => 95, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 96, :ssavalue => Any, :node => :(goto %121 if not %95), :idx => 97, :ssavalue => WebAssemblyCompiler.Box{Int64}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Int64}), :wasm => "", :idx => 98, :ssavalue => Int64, :node => :(Base.getfield(%97, :x)), :wasm => "", :idx => 99, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %98)), :wasm => "", :idx => 100, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %99)), :wasm => "", :idx => 101, :ssavalue => Bool, :node => :(Core.eq_int(%98, %100)), :wasm => "", :idx => 102, :ssavalue => Any, :node => :(goto %104 if not %101), :idx => 103, :ssavalue => Any, :node => :(goto %105), :idx => 104, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 105, :ssavalue => Any, :node => :(goto %106), :idx => 106, :ssavalue => Any, :node => :(goto %107), :idx => 107, :ssavalue => Any, :node => :(goto %108), :idx => 108, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 109, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %108)), :wasm => "", :idx => 110, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %109)), :wasm => "", :idx => 111, :ssavalue => Bool, :node => :(Core.eq_int(%108, %110)), :wasm => "", :idx => 112, :ssavalue => Any, :node => :(goto %114 if not %111), :idx => 113, :ssavalue => Any, :node => :(goto %115), :idx => 114, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 115, :ssavalue => Any, :node => :(goto %116), :idx => 116, :ssavalue => Any, :node => :(goto %117), :idx => 117, :ssavalue => Any, :node => :(goto %118), :idx => 118, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Int32}, %11, %109, %99)), :idx => 119, :ssavalue => Any, :node => :(goto %120), :idx => 120, :ssavalue => Any, :node => :(goto %155), :idx => 121, :ssavalue => Bool, :node => :(%41 isa WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 122, :ssavalue => Any, :node => :(goto %138 if not %121), :idx => 123, :ssavalue => WebAssemblyCompiler.Box{Bool}, :node => Core.PiNode(:(%41), WebAssemblyCompiler.Box{Bool}), :wasm => "", :idx => 124, :ssavalue => Bool, :node => :(Base.getfield(%123, :x)), :wasm => "", :idx => 125, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 126, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %125)), :wasm => "", :idx => 127, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %126)), :wasm => "", :idx => 128, :ssavalue => Bool, :node => :(Core.eq_int(%125, %127)), :wasm => "", :idx => 129, :ssavalue => Any, :node => :(goto %131 if not %128), :idx => 130, :ssavalue => Any, :node => :(goto %132), :idx => 131, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 132, :ssavalue => Any, :node => :(goto %133), :idx => 133, :ssavalue => Any, :node => :(goto %134), :idx => 134, :ssavalue => Any, :node => :(goto %135), :idx => 135, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Bool}, %11, %126, %124)), :idx => 136, :ssavalue => Any, :node => :(goto %137), :idx => 137, :ssavalue => Any, :node => :(goto %155), :idx => 138, :ssavalue => Bool, :node => :(%41 isa Vector{Any}), :wasm => "", :idx => 139, :ssavalue => Any, :node => :(goto %155 if not %138), :idx => 140, :ssavalue => Vector{Any}, :node => Core.PiNode(:(%41), Vector{Any}), :wasm => "", :idx => 141, :ssavalue => Externref, :node => :($(Expr(:invoke, MethodInstance for WebAssemblyCompiler.JS.object(::Vector{Any}), :(WebAssemblyCompiler.JS.object), :(%140)))), :wasm => "", :idx => 142, :ssavalue => Int64, :node => :(Base.sub_int(%40, 1)), :wasm => "", :idx => 143, :ssavalue => Int32, :node => :(Core.trunc_int(Int32, %142)), :wasm => "", :idx => 144, :ssavalue => Int64, :node => :(Core.sext_int(Int64, %143)), :wasm => "", :idx => 145, :ssavalue => Bool, :node => :(Core.eq_int(%142, %144)), :wasm => "", :idx => 146, :ssavalue => Any, :node => :(goto %148 if not %145), :idx => 147, :ssavalue => Any, :node => :(goto %149), :idx => 148, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")), :idx => 149, :ssavalue => Any, :node => :(goto %150), :idx => 150, :ssavalue => Any, :node => :(goto %151), :idx => 151, :ssavalue => Any, :node => :(goto %152), :idx => 152, :ssavalue => Nothing, :node => :((Core.Intrinsics.llvmcall)("(v, i, x) => v[i] = x", WebAssemblyCompiler.JS.Nothing, Tuple{Externref, Int32, Externref}, %11, %143, %141)), :idx => 153, :ssavalue => Any, :node => :(goto %154), :idx => 154, :ssavalue => Nothing, :node => nothing, :idx => 155, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %43)), :wasm => "", :idx => 156, :ssavalue => UInt64, :node => :(Base.sub_int(%155, 0x0000000000000001)), :wasm => "", :idx => 157, :ssavalue => Int64, :node => :(Base.arraylen(_2)), :wasm => "", :idx => 158, :ssavalue => Bool, :node => :(Base.sle_int(0, %157)), :wasm => "", :idx => 159, :ssavalue => UInt64, :node => :(Base.bitcast(UInt64, %157)), :wasm => "", :idx => 160, :ssavalue => Bool, :node => :(Base.ult_int(%156, %159)), :wasm => "", :idx => 161, :ssavalue => Bool, :node => :(Base.and_int(%158, %160)), :wasm => "", :idx => 162, :ssavalue => Any, :node => :(goto %166 if not %161), :idx => 163, :ssavalue => Any, :node => :(Base.arrayref(false, _2, %43)), :wasm => "", :idx => 164, :ssavalue => Int64, :node => :(Base.add_int(%43, 1)), :wasm => "", :idx => 165, :ssavalue => Any, :node => :(goto %167), :idx => 166, :ssavalue => Any, :node => :(goto %167), :idx => 167, :ssavalue => Bool, :node => :(φ (%165 => false, %166 => true)), :idx => 168, :ssavalue => Any, :node => :(φ (%165 => %163)), :idx => 169, :ssavalue => Int64, :node => :(φ (%165 => %164)), :idx => 170, :ssavalue => Bool, :node => :(φ (%166 => true)), :idx => 171, :ssavalue => Any, :node => :(goto %173 if not %167), :idx => 172, :ssavalue => Any, :node => :(goto %175), :idx => 173, :ssavalue => Int64, :node => :(Base.add_int(%42, 1)), :wasm => "", :idx => 174, :ssavalue => Any, :node => :(goto %175), :idx => 175, :ssavalue => Int64, :node => :(φ (%174 => %169)), :idx => 176, :ssavalue => Int64, :node => :(φ (%174 => %173)), :idx => 177, :ssavalue => Any, :node => :(φ (%174 => %168)), :idx => 178, :ssavalue => Int64, :node => :(φ (%174 => %42)), :idx => 179, :ssavalue => Bool, :node => :(φ (%172 => %170, %174 => false)), :idx => 180, :ssavalue => Bool, :node => :(Base.not_int(%179)), :wasm => "", :idx => 181, :ssavalue => Any, :node => :(goto %183 if not %180), :idx => 182, :ssavalue => Any, :node => :(goto %40), :idx => 183, :ssavalue => Any, :node => :(return %11), :wasm => ""], Any[])]))))
ctx.meta = Dict{Symbol, Any}(:debug => WebAssemblyCompiler.DB(CodeInfo(
1 ── %1  = WebAssemblyCompiler.JS.getfield(o, :children)::Vector{String}
│    %2  = Base.arraysize(%1, 1)::Int64
│    %3  = $(Expr(:foreigncall, :(:jl_alloc_array_1d), Vector{String}, svec(Any, Int64), 0, :(:ccall), Vector{String}, :(%2), :(%2)))::Vector{String}
│    %4  = Base.arraylen(%1)::Int64
│    %5  = Core.trunc_int(Int32, %4)::Int32
│    %6  = Core.sext_int(Int64, %5)::Int64
│    %7  = Core.eq_int(%4, %6)::Bool
└───       goto #3 if not %7
2 ──       goto #4
3 ──       (Core.Intrinsics.llvmcall)("x => console.log(x)", WebAssemblyCompiler.JS.Nothing, Tuple{String}, "Inexact conversion")::Nothing
4 ┄─       goto #5
5 ──       goto #6
6 ──       goto #7
7 ──       goto #8
8 ──       goto #9
9 ──       $(Expr(:foreigncall, :(:_jl_array_copy), Nothing, svec(Vector{String}, Vector{String}, Int32), 0, :(:ccall), :(%1), :(%3), :(%5), :(%1), :(%3), :(%5)))::Nothing
└───       goto #10
10 ─ %18 = Base.getfield(x, 1, false)::String
└───       goto #24 if not true
11 ┄ %20 = φ (#10 => %18, #23 => %50)::Union{String, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}}
│    %21 = φ (#10 => 2, #23 => %51)::Int64
│    %22 = WebAssemblyCompiler.JS.push!::typeof(push!)
│    %23 = (isa)(%20, String)::Bool
└───       goto #13 if not %23
12 ─ %25 = π (%20, String)
│          $(Expr(:foreigncall, :(:jl_array_grow_end), Nothing, svec(Any, UInt64), 0, :(:ccall), :(%3), 0x0000000000000001, 0x0000000000000001))::Nothing
│    %27 = Base.arraysize(%3, 1)::Int64
│    %28 = Base.slt_int(%27, 0)::Bool
│    %29 = Core.ifelse(%28, 0, %27)::Int64
│          Base.arrayset(false, %3, %25, %29)::Vector{String}
└───       goto #16
13 ─ %32 = (isa)(%20, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})::Bool
└───       goto #15 if not %32
14 ─ %34 = π (%20, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})
│          invoke %22(%3::Vector{String}, %34::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}})::Any
└───       goto #16
15 ─       Core.throw(ErrorException("fatal error in type inference (type bound)"))::Union{}
└───       unreachable
16 ┄ %39 = Base.sle_int(1, %21)::Bool
└───       goto #18 if not %39
17 ─ %41 = Base.sle_int(%21, 2)::Bool
└───       goto #19
18 ─       nothing::Nothing
19 ┄ %44 = φ (#17 => %41, #18 => false)::Bool
└───       goto #21 if not %44
20 ─ %46 = Base.getfield(x, %21, false)::Union{String, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}}
│    %47 = Base.add_int(%21, 1)::Int64
└───       goto #22
21 ─       goto #22
22 ┄ %50 = φ (#20 => %46)::Union{String, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}}
│    %51 = φ (#20 => %47)::Int64
│    %52 = φ (#20 => false, #21 => true)::Bool
│    %53 = Base.not_int(%52)::Bool
└───       goto #24 if not %53
23 ─       goto #11
24 ┄ %56 = WebAssemblyCompiler.JS.getfield(o, :tag)::String
│    %57 = %new(WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}, %56, $(QuoteNode(NamedTuple())), %3)::WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}
└───       return %57
), Any[], Any[]))
type = Union{String, WebAssemblyCompiler.JS.Node{NamedTuple{(), Tuple{}}}}
ull $struct.0)
  (local.get $11)
 )
)
(local.set $77
 (ref.cast (ref null $struct.0)
  (local.get $11)
 )
)
(local.set $77
 (ref.cast (ref null $struct.0)
  (local.get $11)
 )
)
(local.set $78
 (call $julia_objectVector_Any_
  (local.get $77)
 )
)
(local.set $78
 (call $julia_objectVector_Any_
  (local.get $77)
 )
)
(local.set $79
 (i64.sub
  (local.get $10)
  (i64.const 1)
 )
)
(local.set $79
 (i64.sub
  (local.get $10)
  (i64.const 1)
 )
)
(local.set $80
 (i32.wrap_i64
  (local.get $79)
 )
)
(local.set $80
 (i32.wrap_i64
  (local.get $79)
 )
)
(local.set $81
 (i64.extend_i32_s
  (local.get $80)
 )
)
(local.set $81
 (i64.extend_i32_s
  (local.get $80)
 )
)
(local.set $82
 (i64.eq
  (local.get $79)
  (local.get $81)
 )
)
(local.set $82
 (i64.eq
  (local.get $79)
  (local.get $81)
 )
)
(local.set $83
 (local.get $13)
)
(local.set $83
 (local.get $13)
)
(local.set $84
 (i64.sub
  (local.get $83)
  (i64.const 1)
 )
)
(local.set $84
 (i64.sub
  (local.get $83)
  (i64.const 1)
 )
)
(local.set $85
 (i64.extend_i32_u
  (struct.get $struct.0 1
   (local.get $0)
  )
 )
)
(local.set $85
 (i64.extend_i32_u
  (struct.get $struct.0 1
   (local.get $0)
  )
 )
)
(local.set $86
 (i64.le_s
  (i64.const 0)
  (local.get $85)
 )
)
(local.set $86
 (i64.le_s
  (i64.const 0)
  (local.get $85)
 )
)
(local.set $87
 (local.get $85)
)
(local.set $87
 (local.get $85)
)
(local.set $88
 (i64.lt_u
  (local.get $84)
  (local.get $87)
 )
)
(local.set $88
 (i64.lt_u
  (local.get $84)
  (local.get $87)
 )
)
(local.set $89
 (i32.and
  (local.get $86)
  (local.get $88)
 )
)
(local.set $89
 (i32.and
  (local.get $86)
  (local.get $88)
 )
)
(local.set $90
 (array.get $array.0
  (struct.get $struct.0 0
   (local.get $0)
  )
  (i32.add
   (i32.wrap_i64
    (local.get $13)
   )
   (i32.const -1)
  )
 )
)
(local.set $90
 (array.get $array.0
  (struct.get $struct.0 0
   (local.get $0)
  )
  (i32.add
   (i32.wrap_i64
    (local.get $13)
   )
   (i32.const -1)
  )
 )
)
(local.set $91
 (i64.add
  (local.get $13)
  (i64.const 1)
 )
)
(local.set $91
 (i64.add
  (local.get $13)
  (i64.const 1)
 )
)
(local.set $92
 (i64.add
  (local.get $12)
  (i64.const 1)
 )
)
(local.set $92
 (i64.add
  (local.get $12)
  (i64.const 1)
 )
)
(local.set $93
 (i32.and
  (i32.xor
   (local.get $22)
   (i32.const -1)
  )
  (i32.const 1)
 )
)
(local.set $93
 (i32.and
  (i32.xor
   (local.get $22)
   (i32.const -1)
  )
  (i32.const 1)
 )
)
(return
 (local.get $27)
)
(return
 (local.get $27)
)
(local.set $2
 (call $julia_objectVector_Any_
  (local.get $1)
 )
)
(local.set $2
 (call $julia_objectVector_Any_
  (local.get $1)
 )
)
(local.set $3
 (call $_x_____x_join____StringExternref
  (local.get $2)
 )
)
(local.set $3
 (call $_x_____x_join____StringExternref
  (local.get $2)
 )
)
(local.set $4
 (struct.new $struct.0
  (array.new $array.0
   (global.get $g17407009702552809644)
   (i32.wrap_i64
    (i64.const 0)
   )
  )
  (i32.wrap_i64
   (i64.const 0)
  )
 )
)
(local.set $4
 (struct.new $struct.0
  (array.new $array.0
   (global.get $g17407009702552809644)
   (i32.wrap_i64
    (i64.const 0)
   )
  )
  (i32.wrap_i64
   (i64.const 0)
  )
 )
)
(local.set $5
 (struct.new $struct.0
  (local.get $3)
  (struct.new_default $struct.1)
  (local.get $4)
 )
)
(local.set $5
 (struct.new $struct.0
  (local.get $3)
  (struct.new_default $struct.1)
  (local.get $4)
 )
)
(local.set $6
 (struct.new $struct.0
  (array.new $array.0
   (global.get $g17407009702552809644)
   (i32.wrap_i64
    (i64.const 0)
   )
  )
  (i32.wrap_i64
   (i64.const 0)
  )
 )
)
(local.set $6
 (struct.new $struct.0
  (array.new $array.0
   (global.get $g17407009702552809644)
   (i32.wrap_i64
    (i64.const 0)
   )
  )
  (i32.wrap_i64
   (i64.const 0)
  )
 )
)
(local.set $7
 (struct.new $struct.0
  (global.get $g18272296077325620145)
  (struct.new_default $struct.1)
  (local.get $6)
 )
)
(local.set $7
 (struct.new $struct.0
  (global.get $g18272296077325620145)
  (struct.new_default $struct.1)
  (local.get $6)
 )
)
