#=
# Basic JavaScript interop

This example generates HTML from Julia and inserts the contents here:

---

```@raw html
<div id="myid"></div>
```
---

Here is the Julia code to be compiled to WebAssembly.
In addition to the use of [`JS.h`](@ref), 
this example also shows the use of [`JS.sethtml`](@ref), [`JS.eval`](@ref), and [`JS.console_log`](@ref).

=#

using WebAssemblyCompiler
const h = JS.h

function basics(x)
    n = h("p",
          h("strong", " This is strong text with a class."), class = "myclass")
    n = h("div", "This is some text generated by `JS.h`. ", 
          "This is a number: ", x, n, class = "myclass2")
    JS.sethtml("myid", string(n))
    ## JS.eval("alert('Generated by Julia')")  # It works, but it's too annoying.
    JS.console_log((arr = [1., 2., 3.], str = "hello", num = 2.0, tp = (3, 3.)))
    return x
end
nothing #hide

# Compile it using:

compile((basics, Float64); filepath = "basics/basics.wasm", validate = true, optimize = false)

#=
```@raw html
<script src="basics.wasm.js"></script> 
<script type="module">
    export async function load_wasm() {
        const response = await fetch('basics.wasm');
        const bytes = await response.arrayBuffer();
        const { instance } = await WebAssembly.instantiate(bytes, jsexports);
        const { basics } = instance.exports;
        return instance.exports;
    }
    var wasm = await load_wasm();
    console.log(wasm.basics(3.0));
</script>
```
=#
